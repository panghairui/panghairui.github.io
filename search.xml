<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java内存模型学习笔记</title>
    <url>/2021/07/07/java-nei-cun-mo-xing-xue-xi/</url>
    <content><![CDATA[<h1 id="深入浅出Java内存模型"><a href="#深入浅出Java内存模型" class="headerlink" title="深入浅出Java内存模型"></a>深入浅出Java内存模型</h1><hr>
<h2 id="Java内存模型主要内容"><a href="#Java内存模型主要内容" class="headerlink" title="Java内存模型主要内容"></a>Java内存模型主要内容</h2><ul>
<li>Java内存模型的抽象结构</li>
<li>happen-before规则</li>
<li>对volatile内存语义的探讨</li>
</ul>
<hr>
<h2 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h2><p>Java内存模型定义了Java线程对内存数据进行交互的规范</p>
<p>线程之间的<strong>共享变量</strong>存储在<strong>主内存</strong>中，每个线程都有自己私有的<strong>本地内存</strong>，<strong>本地内存</strong>存储了该线程以读/写共享变量的副本。</p>
<p>本地内存是Java内存模型的抽象概念，并不是真实存在的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5t4o77nwzec0.png"></p>
<p>Java内存模型规定了：线程对变量的所有操作都必须在<strong>本地内存</strong>进行，<strong>不能直接读写主内存</strong>的变量。</p>
<p>Java内存模型定义了8种操作来完成<strong>变量如何从主内存到本地内存，以及变量如何从本地内存到主内存</strong></p>
<p>分别是read/load/use/assign/store/write/lock/unlock操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.2c6jhavq4lwk.png"></p>
<hr>
<h2 id="happen-before"><a href="#happen-before" class="headerlink" title="happen-before"></a>happen-before</h2><p>Happen-before实际上是一套<strong>规则</strong>。Java内存模型定义了这套规则，目的是为了阐述操作之间的内存<strong>可见性</strong></p>
<p>CPU和编译器层面上都有指令重排的问题</p>
<p>指令重排虽然是能提高运行的效率，但在并发编程中，我们在兼顾<strong>效率</strong>的前提下，还希望<strong>程序结果</strong>能由我们掌控。</p>
<p>说白了就是，在某些重要的场景下，这一组操作都不能进行重排序，<strong>前面一个操作的结果对后续操作必须是可见的。</strong></p>
<p>于是，Java内存模型就提出了happen-before这套规则，规则总共有8条</p>
<p>比如传递性、volatile变量规则、程序顺序规则、监视器锁的规则。。。</p>
<p>只要记住，有了happen-before这些规则，我们写的代码只要在这些规则下，前一个操作的结果对后续操作是可见的，是不会发生重排序的。</p>
<hr>
<h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>volatile就是Java的一个关键字</p>
<p>为什么讲Java内存模型往往就会讲到volatile，就是因为它的特性：可见行和有序性</p>
<p>Java内存模型这个规范，很大程度下就是为了解决可见行和有序性的问题。</p>
<p>Java内存模型为了实现volatile有序性和可见行，定义了4种内存屏障的<strong>规范</strong>，分别是LoadLoad/LoadStore/StoreLoad/StoreStore</p>
<p>说白了，就是在volatile<strong>前后</strong>加上<strong>内存屏障</strong>，使得编译器和CPU无法进行重排序，致使有序，并且写volatile变量对其他线程可见。</p>
<hr>
<h2 id="Java虚拟机对内存模型的实现"><a href="#Java虚拟机对内存模型的实现" class="headerlink" title="Java虚拟机对内存模型的实现"></a>Java虚拟机对内存模型的实现</h2><p>Java内存模型定义了规范，Java虚拟机就得实现。</p>
<p>Hotspot虚拟机的实现，在<strong>汇编</strong>层面上实际是通过Lock前缀指令来实现的，而不是各种fence指令（主要原因就是简便。因为大部分平台都支持lock指令，而fence指令是x86平台的）</p>
<p>lock指令能保证：禁止CPU和编译器的重排序（保证了有序性）、保证CPU写核心的指令可以立即生效且其他核心的缓存数据失效（保证了可见行）。</p>
<h2 id="volatile和MESI协议啥关系"><a href="#volatile和MESI协议啥关系" class="headerlink" title="volatile和MESI协议啥关系"></a>volatile和MESI协议啥关系</h2><p>并没有直接关联</p>
<p>Java内存模型关注的是编程语言层面上，它是高维度的抽象。</p>
<p>MESI是CPU缓存一致性协议，不同的CPU架构都不一样，可能有的CPU压根就没有MESI协议。。。</p>
<p>只不过MESI名声比较大，大家都拿它举例子。</p>
<p>MESI只是在<strong>特定场景下</strong>为实现volatile的可见行/有序性而使用到的一部分罢了。</p>
<p>为了让Java程序员屏蔽上面这些底层知识，happen-before原则中就有对volatile的定义：对一个volatile变量的写操作相对于后续对这个变量的读操作可见。</p>
<p>通过happen-before规则规定：只要变量声明了volatile关键字，写后再读，读必须可见写的值。（可见性，有序性）</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>为什么存在Java内存模型</strong>：Java为了屏蔽硬件和操作系统访问内存的各种差异，提出了「Java内存模型」的规范，保证了Java程序在各种平台下对内存的访问都能得到一致效果</p>
<p><strong>Java内存模型抽象结构</strong>：线程之间的「共享变量」存储在「主内存」中，每个线程都有自己私有的「本地内存」，「本地内存」存储了该线程以读/写共享变量的副本。线程对变量的所有操作都必须在「本地内存」进行，而「不能直接读写主内存」的变量</p>
<p><strong>happen-before规则</strong>：Java内存模型规定在某些场景下（一共8条），前面一个操作的结果对后续操作必须是可见的。这8条规则成为happen-before规则</p>
<p><strong>volatile</strong>：volatile是Java的关键字，修饰的变量是可见性且有序的（不会被重排序）。可见性&amp;&amp;有序性由Java内存模型定义的「内存屏障」完成，实际HotSpot虚拟机实现Java内存模型规范，汇编底层是通过Lock指令来实现。</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习-Java注解</title>
    <url>/2021/06/24/java-ji-chu-xue-xi-java-zhu-jie/</url>
    <content><![CDATA[<h1 id="Java基础学习-Java注解"><a href="#Java基础学习-Java注解" class="headerlink" title="Java基础学习-Java注解"></a>Java基础学习-Java注解</h1><hr>
<h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><p>注解可以理解为代码中的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。</p>
<p>注解在开发中非常常见，比如在使用各种框架时，就会用到非常多的注解。如 @Controller / @Param / @Select 等等。</p>
<p>一些项目也用到lombok的注解简化开发，如 @Slf4j / @Data 等等。</p>
<p>除了框架实现的注解，Java原生也有 @Override、@Deprecated、@FunctionalInterface 等基本注解。</p>
<p>原生Java除了这些提供基本注解之外，还有一种叫做元Annotation（元注解），所谓的元Annotation是用来修饰注解的。</p>
<p>常用的元注解有 @Retention 和 @Target 。@Rentention注解可以简单理解为设置注解的生命周期，而 @Target 表示这个注解可以修饰哪些地方（比如方法、还是成员变量、还是包等等）。</p>
<hr>
<h2 id="注解的应用示例"><a href="#注解的应用示例" class="headerlink" title="注解的应用示例"></a>注解的应用示例</h2><p>假设有个监控告警系统，对外提供了客户端供自己使用。监控的一般指标就是 QPS、RT和错误。</p>
<p>原生的客户端需要在代码里指定上报，这会导致这种监控的代码会跟业务代码混合。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// qps 上报</span>
    <span class="token function">qps</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构建上下文(模拟业务代码）</span>
    <span class="token class-name">ProcessContext</span> processContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserModel</span> userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userModel<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>

    <span class="token comment">// rt 上报</span>
    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rt</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 出错上报</span>
    <span class="token function">error</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种基础的监控信息，都可以通过AOP切面的方式去处理掉，而再用注解这个载体配置相关的信息，配合AOP解析就会比较优雅。</p>
<p>要写自定义的注解，首先考虑是在什么时候解析这个注解。这就需要用到前面所说的@Retention注解，这个注解会修饰我们自定义注解生命周期。</p>
<p>@Retention注解传入的是RetentionPolicy枚举，该枚举有三个常量，分别是SOURCE、CLASS和RUNTIME。</p>
<p>理解这块得了解.java文件到class文件再到class被jvm加载的过程了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6wonplyhc9g0.png" alt="image"></p>
<p>从上图可以发现有个<strong>注解抽象语法树</strong>，这里其实就回去解析注解，然后做处理的逻辑。</p>
<p>如果你想在编译期间处理注解相关的逻辑，你需要继承AbsractProcessor并实现process方法。比如可以看到lombok就用AnnotationProcessor继承了AbstractProcessor。</p>
<p>一般来说，只要自定义的注解中@Retention注解设置为SOURCE和CLASS这两个级别，那么就需要继承并实现。</p>
<p>因为SOURCE和CLASS这两个级别等加载到JVM的时候，注解就被抹除了。</p>
<p>lombok的实现原理就是在这（为什么使用了个@Data这样的注解就能有set/get等方法了，就是在这里加上去的）</p>
<p>一般来说，我们自己定义的注解都是RUNTIME级别的，因为大多数情况我们是根据运行时的环境去做一些处理。我们现实在开发的过程中写自定义注解需要配合反射来使用。因为反射是Java获取运行时的信息的重要手段。</p>
<p>所以，就上面的问题来说，可以使用自定义注解，在Spring AOP的逻辑处理中，判断是否带有自定义注解，如果有则将监控的逻辑写在方法的前后。</p>
<p>这样，只要在方法上加上这个注解，那就可以有对方法监控的效果了。（RT、QPS、ERROR）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.sanwai.service.openapi.monitor.Monitor)"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">antispan</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> functionName <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    tags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"functionName"</span><span class="token punctuation">,</span> functionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    monitor<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>functionName<span class="token punctuation">,</span> <span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//方法执行开始时间</span>
    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        o <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//方法执行结束时间</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        tags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        monitor<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"rt"</span><span class="token punctuation">,</span> tags<span class="token punctuation">,</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        monitor<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>functionName<span class="token punctuation">,</span> <span class="token string">"fail"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//方法执行结束时间</span>
    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    monitor<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"rt"</span><span class="token punctuation">,</span> tags<span class="token punctuation">,</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        monitor<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>functionName<span class="token punctuation">,</span> <span class="token string">"done"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注解是代码的特殊标记，可以在编译、类加载、运行时被读取。</p>
<p>其实对应的就是RetentionPolicy枚举三种级别。</p>
<p>SOURCE和CLASS级别需要继承AbstractProcess，实现process方法去处理我们自定义的注解。</p>
<p>而RUNTIME级别是我们日常开发用的最多的了，配合Java反射机制可以在很多场景优化我们的代码。</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 11.盛最多水的容器</title>
    <url>/2021/06/07/leetcode-11.sheng-zui-duo-shui-de-rong-qi/</url>
    <content><![CDATA[<h1 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr>
<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p><strong>说明：</strong>你不能倾斜容器。</p>
<p><strong>示例1：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5s29rj6y2rk0.png" alt="image"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：<span class="token punctuation">[</span><span class="token number">1,8</span>,6,2,5,4,8,3,7<span class="token punctuation">]</span>
输出：49 
解释：图中垂直线代表输入数组 <span class="token punctuation">[</span><span class="token number">1,8</span>,6,2,5,4,8,3,7<span class="token punctuation">]</span>。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class="token number">49</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>示例2：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,1</span><span class="token punctuation">]</span>
输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例3：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例4：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,1<span class="token punctuation">]</span>
输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>提示：</strong></p>
<ul>
<li><code>n = height.length</code></li>
<li><code>2 &lt;= n &lt;= 3 * 104</code></li>
<li><code>0 &lt;= height[i] &lt;= 3 * 104</code></li>
</ul>
<blockquote>
<p>双指针，看代码应该就能看懂。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                l<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                r<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 239.滑动窗口最大值</title>
    <url>/2021/06/05/leetcode-239.hua-dong-chuang-kou-zui-da-zhi/</url>
    <content><![CDATA[<h1 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr>
<p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回滑动窗口中的最大值。</p>
<p><strong>示例1：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,3</span>,-1,-3,5,3,6,7<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token punctuation">[</span><span class="token number">3,3</span>,5,5,6,7<span class="token punctuation">]</span>
解释：
滑动窗口的位置                最大值
---------------               -----
<span class="token punctuation">[</span><span class="token number">1</span>  <span class="token number">3</span>  -1<span class="token punctuation">]</span> -3  <span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">3</span>
 <span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">3</span>  -1  -3<span class="token punctuation">]</span> <span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">3</span>
 <span class="token number">1</span>  <span class="token number">3</span> <span class="token punctuation">[</span>-1  -3  <span class="token number">5</span><span class="token punctuation">]</span> <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">5</span>
 <span class="token number">1</span>  <span class="token number">3</span>  -1 <span class="token punctuation">[</span>-3  <span class="token number">5</span>  <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">5</span>
 <span class="token number">1</span>  <span class="token number">3</span>  -1  -3 <span class="token punctuation">[</span><span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span><span class="token punctuation">]</span> <span class="token number">7</span>       <span class="token number">6</span>
 <span class="token number">1</span>  <span class="token number">3</span>  -1  -3  <span class="token number">5</span> <span class="token punctuation">[</span><span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span><span class="token punctuation">]</span>      <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>示例2：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例3：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>,-1<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span>,-1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例4：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9,11</span><span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例5：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span>,-2<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>经典老番，滑动窗口。双端队列左边维护过期值弹出，右边维护最大值加入和淘汰队尾元素。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            res<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 5.最长回文子串</title>
    <url>/2021/06/05/leetcode-5.zui-chang-hui-wen-zi-chuan/</url>
    <content><![CDATA[<h1 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p><strong>示例1：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"babad"</span>
输出：<span class="token string">"bab"</span>
解释：<span class="token string">"aba"</span> 同样是符合题意的答案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>示例2：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"cbbd"</span>
输出：<span class="token string">"bb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例3：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"a"</span>
输出：<span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例4：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"ac"</span>
输出：<span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>提示</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li>
</ul>
<blockquote>
<p>正好刚学完manacher看到了这题。直接用manacher解了。</p>
<p>PS：manacher算法一般用来求最长回文子串长度。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getManacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'#'</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">manacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> <span class="token function">getManacher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>charArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">&gt;</span> i <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> i<span class="token punctuation">,</span> resArr<span class="token punctuation">[</span><span class="token class-name">C</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> resArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>i <span class="token operator">+</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> charArr<span class="token punctuation">[</span>i <span class="token operator">-</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">R</span> <span class="token operator">=</span> i <span class="token operator">+</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">C</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                max <span class="token operator">=</span> resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> flag <span class="token operator">-</span> resArr<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flag <span class="token operator">+</span> resArr<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">+=</span> charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token function">manacher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>manacher</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 72.编辑距离</title>
    <url>/2021/06/25/leetcode-72.bian-ji-ju-chi/</url>
    <content><![CDATA[<h1 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<p><strong>示例 1：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：word1 <span class="token operator">=</span> <span class="token string">"horse"</span>, word2 <span class="token operator">=</span> <span class="token string">"ros"</span>
输出：3
解释：
horse -<span class="token operator">&gt;</span> rorse <span class="token punctuation">(</span>将 <span class="token string">'h'</span> 替换为 <span class="token string">'r'</span><span class="token punctuation">)</span>
rorse -<span class="token operator">&gt;</span> rose <span class="token punctuation">(</span>删除 <span class="token string">'r'</span><span class="token punctuation">)</span>
rose -<span class="token operator">&gt;</span> ros <span class="token punctuation">(</span>删除 <span class="token string">'e'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>示例 2：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：word1 <span class="token operator">=</span> <span class="token string">"intention"</span>, word2 <span class="token operator">=</span> <span class="token string">"execution"</span>
输出：5
解释：
intention -<span class="token operator">&gt;</span> inention <span class="token punctuation">(</span>删除 <span class="token string">'t'</span><span class="token punctuation">)</span>
inention -<span class="token operator">&gt;</span> enention <span class="token punctuation">(</span>将 <span class="token string">'i'</span> 替换为 <span class="token string">'e'</span><span class="token punctuation">)</span>
enention -<span class="token operator">&gt;</span> exention <span class="token punctuation">(</span>将 <span class="token string">'n'</span> 替换为 <span class="token string">'x'</span><span class="token punctuation">)</span>
exention -<span class="token operator">&gt;</span> exection <span class="token punctuation">(</span>将 <span class="token string">'n'</span> 替换为 <span class="token string">'c'</span><span class="token punctuation">)</span>
exection -<span class="token operator">&gt;</span> execution <span class="token punctuation">(</span>插入 <span class="token string">'u'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li>
</ul>
<blockquote>
<p>我动态规划还是太菜了，想不出来看题解才知道咋做，看来得分出一个月时间专门练习动态规划了。。。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 76.最小覆盖子串</title>
    <url>/2021/06/22/leetcode-76.zui-xiao-fu-gai-zi-chuan/</url>
    <content><![CDATA[<h1 id="最小覆盖子串"><a href="#最小覆盖子串" class="headerlink" title="最小覆盖子串"></a>最小覆盖子串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr>
<p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>
<p><strong>注意：</strong>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p>
<p><strong>示例 1：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"ADOBECODEBANC"</span>, t <span class="token operator">=</span> <span class="token string">"ABC"</span>
输出：<span class="token string">"BANC"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>示例 2：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入：s <span class="token operator">=</span> <span class="token string">"a"</span>, t <span class="token operator">=</span> <span class="token string">"a"</span>
输出：<span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 105</code></li>
<li><code>s 和 t 由英文字母组成</code></li>
</ul>
<blockquote>
<p>用滑动窗口解决。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ttr <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ttr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tnum<span class="token punctuation">[</span>ttr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mi <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>snum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tnum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            snum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> ttr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> mi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mi <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
                    begin <span class="token operator">=</span> left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>snum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> tnum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ans<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                snum<span class="token punctuation">[</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mi <span class="token operator">==</span> str<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> begin <span class="token operator">+</span> mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习-数据库调优</title>
    <url>/2021/06/21/mysql-xue-xi-shu-ju-ku-diao-you/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记-数据库调优"><a href="#MySQL学习笔记-数据库调优" class="headerlink" title="MySQL学习笔记-数据库调优"></a>MySQL学习笔记-数据库调优</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于开发者而言，对MySQL的调优重点一般是在“开发规范”、“数据库索引”又或者解决线上慢查询上。而对于MySQL内部的参数调优，由专业的DBA来搞。</p>
<hr>
<h2 id="平时的开发规范和索引的优化"><a href="#平时的开发规范和索引的优化" class="headerlink" title="平时的开发规范和索引的优化"></a>平时的开发规范和索引的优化</h2><p>首先在生产环境下创建数据表，都是在工单系统下完成的（需要DBA审批）。</p>
<p>如果在创建表时检测到没有创建索引，就会提示warning。</p>
<p><strong>理论上来说，如果表有一定的数据量，那就应该要创建索引。</strong></p>
<p>从数据库查询数据需要注意的地方：</p>
<ul>
<li>是否能<strong>覆盖索引</strong>，减少<strong>回表</strong>所消耗的时间。意味着，我们在 select 的时候，一定要指明对应的列，而不是 select *。</li>
<li>考虑是否组建<strong>联合索引</strong>，如果组建<strong>联合索引</strong>，尽量将区分度最高的放在最左边，并且需要考虑<strong>最左匹配原则</strong>。</li>
<li>对索引进行函数操作或者表达式计算会导致索引失效</li>
<li>利用子查询优化超多分页场景。比如 limit offset，n 在MySQL是先获取 offset 行，再返回 n 条记录。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率。</li>
<li>通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过 show profile 来查看SQL对系统资源的损耗情况（一般少用到）。</li>
<li>开启事务后，在事务内尽可能只操作数据库，并有意识的减少锁的持有时间。（比如在事务内需要插入和修改数据，那可以先插入后修改，因为修改属于更新操作，会加锁，并发下可能导致多个事务请求锁等待释放）</li>
</ul>
<blockquote>
<p>Tips</p>
<p><a href="https://blog.csdn.net/vierhang/article/details/106624472">利用延迟关联或者子查询优化超多分页场景</a></p>
</blockquote>
<hr>
<h2 id="线上一般用什么隔离级别"><a href="#线上一般用什么隔离级别" class="headerlink" title="线上一般用什么隔离级别"></a>线上一般用什么隔离级别</h2><p>MySQL 默认用的是 Repeatable read （可重复读）。</p>
<p>一般互联网公司都选择 Read Commit 作为主要的隔离级别。</p>
<p>像 Repeatable read （可重复读）隔离级别，就有可能因为<strong>间隙锁</strong>导致死锁。</p>
<p>MySQL默认的隔离级别为 Repeatable read （可重复读），很大一部分原因是因为最开始MySQL的binlog没有row模式，在read commit隔离级别下会存在<strong>主从数据不一致</strong>的问题。</p>
<p>binlog记录了数据库表结构和表数据<strong>变更</strong>，比如update/delete/insert/truncate/create。在MySQL中，主从同步实际上就是应用了binlog来实现的。</p>
<p>有了该历史原因，所以MySQL就将默认的隔离级别设置为了 Repeatable read （可重复读）。</p>
<hr>
<h2 id="即使走对了索引，为什么线上查询还是慢"><a href="#即使走对了索引，为什么线上查询还是慢" class="headerlink" title="即使走对了索引，为什么线上查询还是慢"></a>即使走对了索引，为什么线上查询还是慢</h2><p>即使走对了索引，线上查询还是慢，那一般来说就是表的数据量实在太大了。</p>
<p>首先，考虑能不能把<strong>旧的数据</strong>给删除掉（一般不会删的，只有极少部分业务可以删掉数据）。</p>
<p>随后，考虑能不能在查询数据库之前，直接走一层缓存（Redis）。</p>
<p>走缓存的话，考虑业务能不能忍受读取的<strong>非真正实时</strong>的数据。如果查询条件相对复杂多变的话（涉及group by 和 sum），那走缓存也不是一种好办法，维护起来不方便。</p>
<p>再看看是不是有<strong>字符串</strong>检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走搜索引擎了。</p>
<p>MySQL-&gt;Elasticsearch需要有对应的同步程序（一般就是监听MySQL的binlog，解析binlog后导入到Elasticsearch）。</p>
<p>如果还不是的话，那考虑要不要做相应的聚合表，线上请求就查询聚合表数据，不走原表。以空间换时间。</p>
<hr>
<h2 id="除了读以外，写性能同样有瓶颈，怎么办"><a href="#除了读以外，写性能同样有瓶颈，怎么办" class="headerlink" title="除了读以外，写性能同样有瓶颈，怎么办"></a>除了读以外，写性能同样有瓶颈，怎么办</h2><p>如果MySQL读写都有瓶颈，就要考虑架构问题。</p>
<p>如果是单库的，可以考虑升级至主从架构，实现读写分离。</p>
<p>如果仍存在瓶颈，就要考虑分库分表了。</p>
<p>分库分表的ID选择也是个问题。思路有很多，有借助MySQL自增的，有借助Redis自增的，有基于<strong>雪花算法</strong>自增的。一般使用Redis和<strong>雪花算法</strong>实现。</p>
<p>分库分表的迁移过程是怎样的呢？</p>
<p>一般采用<strong>双写</strong>的方式进行迁移：</p>
<ul>
<li>增量的消息各自往新表和旧表写一份</li>
<li>将旧表的数据迁移至新表</li>
<li>迟早新表的数据都会追得上旧表</li>
<li>效验新表和老表的数据是否正常</li>
<li>开启双读（一部分流量走新表，一部分流量走老表）</li>
<li>读流量全部切新表，停止老表写入</li>
</ul>
<p>另外，提前准备回滚机制，临时切换失败能正常恢复业务。</p>
]]></content>
      <categories>
        <category>MySQL学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz学习笔记</title>
    <url>/2021/07/05/quartz-xue-xi/</url>
    <content><![CDATA[<h1 id="Quartz学习笔记"><a href="#Quartz学习笔记" class="headerlink" title="Quartz学习笔记"></a>Quartz学习笔记</h1><hr>
<h2 id="Quartz简介"><a href="#Quartz简介" class="headerlink" title="Quartz简介"></a>Quartz简介</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Quartz是OpenSymphony提供的开源任务调度框架</p>
<p>官网：<a href="http://www.quartz-scheduler.org/">http://www.quartz-scheduler.org/</a></p>
<p>纯Java实现，精细控制排程。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>强大的调度功能</li>
<li>灵活的应用方式</li>
<li>分布式和集群能力</li>
</ul>
<h3 id="Quartz的设计模式"><a href="#Quartz的设计模式" class="headerlink" title="Quartz的设计模式"></a>Quartz的设计模式</h3><ul>
<li>Builder模式</li>
<li>Factory模式</li>
<li>组件模式</li>
<li>链式写法</li>
</ul>
<hr>
<h2 id="Quartz体系结构"><a href="#Quartz体系结构" class="headerlink" title="Quartz体系结构"></a>Quartz体系结构</h2><h3 id="三个核心概念"><a href="#三个核心概念" class="headerlink" title="三个核心概念"></a>三个核心概念</h3><ul>
<li>调度器</li>
<li>任务</li>
<li>触发器</li>
</ul>
<p>JobDetail : 包含了任务的实现类以及类的信息</p>
<p>trigger : 决定任务什么时候被调用</p>
<ul>
<li>SimpleTrigger</li>
<li>CronTrigger : 实现更复杂的业务逻辑，更常用</li>
</ul>
<p>scheduler : 可以定时定频率获得JobDetail的信息，把JobDetail和trigger绑定到了一起</p>
<h3 id="总要组成"><a href="#总要组成" class="headerlink" title="总要组成"></a>总要组成</h3><ul>
<li>Job</li>
<li>JobDetail</li>
<li>JobBuilder</li>
<li>JobStore</li>
<li>Trigger</li>
<li>TriggerBuilder</li>
<li>ThreadPool</li>
<li>Scheduler</li>
<li>Calendar : 一个Trigger可以和多个Calendar关联，以排除或包含某些时间点</li>
<li>监听器<ul>
<li>JobListener</li>
<li>TriggerListener</li>
<li>SchedulerListener</li>
</ul>
</li>
</ul>
<hr>
<h2 id="手写简单的Quartz-Demo"><a href="#手写简单的Quartz-Demo" class="headerlink" title="手写简单的Quartz Demo"></a>手写简单的Quartz Demo</h2><blockquote>
<p>完成一个每两秒钟打印一个Hello World的功能</p>
</blockquote>
<p><strong>Job</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 打印当前的执行时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 编写具体的业务逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Scheduler</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloScheduler</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 创建一个JobDetail实例，将该实例与HelloJob Class绑定</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个Trigger实例，定义该Job立即执行，并且每隔两秒钟执行一次，直到永远</span>
        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myTrigger"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>
                        <span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Scheduler实例</span>
        <span class="token class-name">SchedulerFactory</span> sfact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> sfact<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 打印当前的时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Job-amp-JobDetail"><a href="#Job-amp-JobDetail" class="headerlink" title="Job &amp; JobDetail"></a>Job &amp; JobDetail</h2><h3 id="Job定义"><a href="#Job定义" class="headerlink" title="Job定义"></a>Job定义</h3><p>实现业务逻辑的任务接口</p>
<p>Job接口非常容易实现，只有一个execute方法，类似TimerTask的run方法，在里面编写业务逻辑</p>
<h3 id="Job源码"><a href="#Job源码" class="headerlink" title="Job源码"></a>Job源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Job生命周期"><a href="#Job生命周期" class="headerlink" title="Job生命周期"></a>Job生命周期</h3><p>每次调度器执行Job时，它在调用execute方法前会创建一个新的job实例。</p>
<p>当调用完成后，关联的Job对象实例会被释放，释放的实例会被垃圾回收机制回收。</p>
<h3 id="JobDetail"><a href="#JobDetail" class="headerlink" title="JobDetail"></a>JobDetail</h3><p>JobDetail为Job实例提供了许多设置属性，以及JobDataMap成员变量属性，它用来存储特定Job实例的状态信息，调度器需要借助JobDetail对象来添加Job实例。</p>
<h3 id="JobDetail重要属性"><a href="#JobDetail重要属性" class="headerlink" title="JobDetail重要属性"></a>JobDetail重要属性</h3><ul>
<li>name（任务的名称）</li>
<li>group（任务所在的组）</li>
<li>jobClass（任务的实现类）</li>
<li>jobDataMap</li>
</ul>
<hr>
<h2 id="JobExecutionContext-amp-JobDataMap"><a href="#JobExecutionContext-amp-JobDataMap" class="headerlink" title="JobExecutionContext &amp; JobDataMap"></a>JobExecutionContext &amp; JobDataMap</h2><h3 id="JobExecutionContext是什么"><a href="#JobExecutionContext是什么" class="headerlink" title="JobExecutionContext是什么"></a>JobExecutionContext是什么</h3><ul>
<li>当Scheduler调用一个Job，就会将JobExecutionContext传递给Job的execute()方法；</li>
<li>Job能通过JobExecutionContext对象访问到Quartz运行时候的环境以及Job本身的明细数据</li>
</ul>
<h3 id="JobDataMap是什么"><a href="#JobDataMap是什么" class="headerlink" title="JobDataMap是什么"></a>JobDataMap是什么</h3><ul>
<li>在进行任务调度时JobDataMap存储在JobExecutionContext中，非常方便获取。</li>
<li>JobDataMap可以用来装载任何可序列化的数据对象，当Job实例对象被执行时这些参数对象会传递给它。</li>
<li>JobDataMap实现了JDK的Map接口，并且添加了一些非常方便的方法用来存取基本数据类型。</li>
</ul>
<h3 id="获取JobDataMap的两种方式"><a href="#获取JobDataMap的两种方式" class="headerlink" title="获取JobDataMap的两种方式"></a>获取JobDataMap的两种方式</h3><ul>
<li>从Map中直接获取</li>
</ul>
<p><strong>Scheduler</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloScheduler</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 创建一个JobDetail实例，将该实例与HelloJob Class绑定</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"hello myJob1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"FloatJobValue"</span><span class="token punctuation">,</span> <span class="token number">3.14F</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个Trigger实例，定义该Job立即执行，并且每隔两秒钟执行一次，直到永远</span>
        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myTrigger"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"hello myTrigger1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"DoubleTriggerValue"</span><span class="token punctuation">,</span> <span class="token number">2.0D</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>
                        <span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Scheduler实例</span>
        <span class="token class-name">SchedulerFactory</span> sfact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> sfact<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 打印当前的时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Job</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 打印当前的执行时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 编写具体的业务逻辑</span>
        <span class="token class-name">JobKey</span> key <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Name And Group Are "</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TriggerKey</span> trKey <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Trigger And Group Are "</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JobDataMap</span> tdataMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> jobMsg <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Float</span> jobFloatValue <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"FloatJobValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> triggerMsg <span class="token operator">=</span> tdataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Double</span> triggerDoubleValue <span class="token operator">=</span> tdataMap<span class="token punctuation">.</span><span class="token function">getDoubleValue</span><span class="token punctuation">(</span><span class="token string">"DoubleTriggerValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JobMsg is "</span> <span class="token operator">+</span> jobMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JobFloatValue is "</span> <span class="token operator">+</span> jobFloatValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TriggerMsg is "</span> <span class="token operator">+</span> triggerMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TriggerDoubleValue is "</span> <span class="token operator">+</span> triggerDoubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以用getMergedJobDataMap()获取两个</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 打印当前的执行时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 编写具体的业务逻辑</span>
        <span class="token class-name">JobKey</span> key <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Name And Group Are "</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TriggerKey</span> trKey <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Trigger And Group Are "</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">JobDataMap</span> dataMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getMergedJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Float</span> jobFloatValue <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"FloatJobValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Double</span> triggerDoubleValue <span class="token operator">=</span> dataMap<span class="token punctuation">.</span><span class="token function">getDoubleValue</span><span class="token punctuation">(</span><span class="token string">"DoubleTriggerValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Msg is "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JobFloatValue is "</span> <span class="token operator">+</span> jobFloatValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TriggerDoubleValue is "</span> <span class="token operator">+</span> triggerDoubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Job实现类中添加setter方法对应JobDataMap的键值（Quartz框架默认的JobFactory实现类在初始化Job实例对象时会自动的调用这些setter方法）</li>
</ul>
<p><strong>Job</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Float</span> <span class="token class-name">FloatJobValue</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> <span class="token class-name">DoubleTriggerValue</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 打印当前的执行时间，格式为2017-01-01 00：00：00</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Exec Time Is:"</span> <span class="token operator">+</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 编写具体的业务逻辑</span>
        <span class="token class-name">JobKey</span> key <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Name And Group Are "</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TriggerKey</span> trKey <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Trigger And Group Are "</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> trKey<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// JobDataMap dataMap = jobExecutionContext.getMergedJobDataMap();</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Msg is "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JobFloatValue is "</span> <span class="token operator">+</span> <span class="token class-name">FloatJobValue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TriggerDoubleValue is "</span> <span class="token operator">+</span> <span class="token class-name">DoubleTriggerValue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h2><h3 id="Trigger是什么"><a href="#Trigger是什么" class="headerlink" title="Trigger是什么"></a>Trigger是什么</h3><p>Quartz中的触发器是用来告诉调度程序作业什么时候触发。</p>
<p>即Trigger对象是用来触发Job的。</p>
<h3 id="触发器的通用属性"><a href="#触发器的通用属性" class="headerlink" title="触发器的通用属性"></a>触发器的通用属性</h3><ul>
<li>JobKey : 表示job实例的标识，触发器被触发时，该指定的job实例会执行</li>
<li>StartTime : 表示触发器的时间表<strong>首次被触发的时间</strong>。它的值的类型是Java.util.Date</li>
<li>EndTime : 指定触发器的<strong>不再被触发</strong>的时间。它的值的类型是Java.util.Date</li>
</ul>
<hr>
<h2 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a>SimpleTrigger</h2><h3 id="SimpleTrigger的作用"><a href="#SimpleTrigger的作用" class="headerlink" title="SimpleTrigger的作用"></a>SimpleTrigger的作用</h3><p>在一个<strong>指定时间段</strong>内<strong>执行一次</strong>作业任务</p>
<p>或是在<strong>指定的时间间隔</strong>内<strong>多次执行</strong>作业任务</p>
<h3 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h3><ul>
<li>重复次数可以为<strong>0，正整数</strong>或是<strong>SimpleTrigger.REPEAT_INDEFINITELY</strong>常量值</li>
<li>重复执行间隔必须为<strong>0或长整数</strong></li>
<li>一旦被指定了endTime参数，那么它会<strong>覆盖重复次数参数</strong>的效果</li>
</ul>
<hr>
<h2 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h2><h3 id="CronTrigger的作用"><a href="#CronTrigger的作用" class="headerlink" title="CronTrigger的作用"></a>CronTrigger的作用</h3><p><strong>基于日历</strong>的<strong>作业调度器</strong>，而不是像SimpleTrigger那样精确指定间隔时间，比SimpleTrigger更常用。</p>
<h3 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h3><p>用于<strong>配置CronTrigger</strong>实例。</p>
<p>是由7个子表达式组成的字符串，描述了时间表的详细信息。</p>
<p>格式：[秒] [分] [小时] [日] [月] [周] [年]</p>
<h3 id="Cron表达式特殊字符意义对应表"><a href="#Cron表达式特殊字符意义对应表" class="headerlink" title="Cron表达式特殊字符意义对应表"></a>Cron表达式特殊字符意义对应表</h3><table>
<thead>
<tr>
<th>字段</th>
<th>是否必填</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>是</td>
<td>0~59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>是</td>
<td>0~59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>是</td>
<td>0~23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日</td>
<td>是</td>
<td>1~31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月</td>
<td>是</td>
<td>1~12或者JAN_DEC</td>
<td>, - * /</td>
</tr>
<tr>
<td>周</td>
<td>是</td>
<td>1~7或者SUN_SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年</td>
<td>否</td>
<td>empty，1970~2099</td>
<td>, - * /</td>
</tr>
</tbody></table>
<h3 id="Cron表达式举例"><a href="#Cron表达式举例" class="headerlink" title="Cron表达式举例"></a>Cron表达式举例</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0 15 10 ? * *</td>
<td>每天10点15分触发</td>
</tr>
<tr>
<td>0 0/5 14 * * ?</td>
<td>每天下午的2点到2点59分（整点开始，每隔5分触发）</td>
</tr>
<tr>
<td>0 15 10 ? * MON_FRI</td>
<td>从周一到周五每天上午的10点15分触发</td>
</tr>
<tr>
<td>0 15 10 ? * 6#3</td>
<td>每月的第三周的星期五开始触发</td>
</tr>
<tr>
<td>0 15 10 ? * 6L 2016-2017</td>
<td>从2016年到2017年每月最后一周的星期五10点15分触发</td>
</tr>
</tbody></table>
<h3 id="Cron表达式小提示"><a href="#Cron表达式小提示" class="headerlink" title="Cron表达式小提示"></a>Cron表达式小提示</h3><ul>
<li>L和W可以组合使用</li>
<li>周字段英文字母不区分大小写即MON与mon相同</li>
<li>利用工具，在线生成</li>
</ul>
]]></content>
      <categories>
        <category>工作学习笔记</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习-基本数据结构</title>
    <url>/2021/06/13/redis-xue-xi-ji-ben-shu-ju-jie-gou/</url>
    <content><![CDATA[<h1 id="Redis学习-基本数据结构"><a href="#Redis学习-基本数据结构" class="headerlink" title="Redis学习-基本数据结构"></a>Redis学习-基本数据结构</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis支持丰富的数据结构，<strong>常用</strong>的有string、list、hash、set、sortset这几种。学习这些数据结构是使用Redis的基础！</p>
<p>Redis的存储是以<code>key-value</code>的形式的。Redis中的key一定是字符串，value可以是string、list、hash、set、sortset这几种常用的。</p>
<p>Redis并<strong>没有直接使用</strong>这些数据结构来实现<code>key-value</code>数据库，而是<strong>基于</strong>这些数据结构创建了一个<strong>对象系统</strong>。</p>
<blockquote>
<p>简单来说：Redis使用对象来表示数据库中的键和值。每次我们在Redis数据库中新创建一个键值对时，<strong>至少会创建出两个对象</strong>。一个是键对象，一个是值对象。</p>
</blockquote>
<p>Redis中的每个对象都由一个redisObject结构来表示：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct redisObject{
    // 对象的类型
    unsigned type 4:;
    // 对象的编码格式
    unsigned encoding:4;
    // 指向底层实现数据结构的指针
    void * ptr;
    //.....
}robj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>类型</th>
<th>编码</th>
<th>对象</th>
</tr>
</thead>
<tbody><tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_INT</td>
<td>使用整数值实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_EMBSTR</td>
<td>使用embstr编码的简单动态字符串实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_RAW</td>
<td>使用简单动态字符串实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的列表对象</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_LINKEDLIST</td>
<td>使用双端链表实现的列表对象</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的哈希对象</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的哈希对象</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_INTSET</td>
<td>使用整数集合实现的集合对象</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的集合对象</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的有序集合对象</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_SKIPLIST</td>
<td>使用跳跃表和字典实现的有序集合对象</td>
</tr>
</tbody></table>
<p>简单来说就是Redis对<code>key-value</code>封装成对象，key是一个对象，value也是一个对象。每个对象都有type(类型)、encoding(编码)、ptr(指向底层数据结构的指针)来表示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6x8naanoa880.png" alt="image"></p>
<p>下面我就来说一下我们Redis常见的数据类型：string、list、hash、set、sortset。它们的底层数据结构究竟是怎么样的！</p>
<hr>
<h2 id="SDS简单动态字符串"><a href="#SDS简单动态字符串" class="headerlink" title="SDS简单动态字符串"></a>SDS简单动态字符串</h2><blockquote>
<p>简单动态字符串（Simple dynamic string，SDS）</p>
</blockquote>
<p>Redis中的字符串跟C语言中的字符串，是<strong>有点差距的</strong>。</p>
<p>Redis使用sdshdr结构来表示一个SDS值：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct sdshdr{
    // 字节数组，用于保存字符串
    char buf[];
    // 记录buf数组中已使用的字节数量，也是字符串的长度
    int len;
    // 记录buf数组未使用的字节数量
    int free;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>使用SDS的好处</p>
</blockquote>
<ol>
<li>sdshdr数据结构中用len属性记录了字符串的长度。那么**获取字符串的长度时，时间复杂度只需要O(1)**。</li>
<li>SDS不会发生溢出的问题，如果修改SDS时，空间不足。先会扩展空间，再进行修改！(<strong>内部实现了动态扩展机制</strong>)。</li>
<li>SDS可以<strong>减少内存分配的次数</strong>(空间预分配机制)。在扩展空间时，除了分配修改时所必要的空间，还会分配额外的空闲空间(free 属性)。</li>
<li>SDS是<strong>二进制安全的</strong>，所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。</li>
</ol>
<hr>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>使用listNode结构来表示每个节点：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct listNode{
    //前置节点
    struct listNode  *pre;
    //后置节点
    struct listNode  *pre;
    //节点的值
    void  *value;
}listNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用listNode可以组成链表，Redis中<strong>使用list结构来持有链表</strong>：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct list{
    //表头结点
    listNode  *head;
    //表尾节点
    listNode  *tail;
    //链表长度
    unsigned long len;
    //节点值复制函数
    void *(*dup) (viod *ptr);
    //节点值释放函数
    void  (*free) (viod *ptr);
    //节点值对比函数
    int (*match) (void *ptr,void *key);
}list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Redis链表的特性</p>
</blockquote>
<ul>
<li>无环双向链表</li>
<li>获取表头指针，表尾指针，链表节点长度的时间复杂度均为O(1)</li>
<li>链表使用<code>void *</code>指针来保存节点值，可以保存各种不同类型的值</li>
</ul>
<hr>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>在Redis中，<code>key-value</code>的数据结构底层就是哈希表来实现的。对于哈希表来说，我们也并不陌生。在Java中，哈希表实际上就是数组+链表的形式来构建的。</p>
<p>在Redis里边，哈希表使用dictht结构来定义：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictht{
    //哈希表数组
    dictEntry **table;  
    
    //哈希表大小
    unsigned long size;    
    
    //哈希表大小掩码，用于计算索引值
    //总是等于size-1
    unsigned long sizemark;     
    
    //哈希表已有节点数量
    unsigned long used;
}dictht<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>哈希表的节点实现：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictEntry {
    //键
    void *key;

    //值
    union {
        void *value;
        uint64_tu64;
        int64_ts64;
    }v;    

    //指向下个哈希节点，组成链表
    struct dictEntry *next;
}dictEntry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从结构上看，我们可以发现：Redis实现的哈希表和Java中实现的是<strong>类似</strong>的。只不过Redis多了几个属性来记录常用的值：sizemark(掩码)、used(已有的节点数量)、size(大小)。</p>
<p>同样地，Redis为了更好的操作，对哈希表往上再封装了一层(参考上面的Redis实现链表)，使用dict结构来表示：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dict {

    //类型特定函数
    dictType *type;

    //私有数据
    void *privdata;

    //哈希表
    dictht ht[2];

    //rehash索引
    //当rehash不进行时，值为-1
    int rehashidx;  

}dict;


//-----------------------------------

typedef struct dictType{

    //计算哈希值的函数
    unsigned int (*hashFunction)(const void * key);

    //复制键的函数
    void *(*keyDup)(void *private, const void *key);

    //复制值得函数
    void *(*valDup)(void *private, const void *obj);  

    //对比键的函数
    int (*keyCompare)(void *privdata , const void *key1, const void *key2)

    //销毁键的函数
    void (*keyDestructor)(void *private, void *key);

    //销毁值的函数
    void (*valDestructor)(void *private, void *obj);  

}dictType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Redis中有两个哈希表</strong>：</p>
<ul>
<li>ht[0]：用于存放<strong>真实</strong>的<code>key-vlaue</code>数据</li>
<li>ht[1]：用于<strong>扩容(rehash)</strong></li>
</ul>
<p>Redis中哈希算法和哈希冲突跟Java实现的差不多，它俩<strong>差异</strong>就是：</p>
<ul>
<li>Redis哈希冲突时：是将新节点添加在链表的<strong>表头</strong>。</li>
<li>JDK1.8后，Java在哈希冲突时：是将新的节点添加到链表的<strong>表尾</strong>。</li>
</ul>
<blockquote>
<p>rehash过程</p>
</blockquote>
<p><strong>Redis是专门使用一个哈希表来做rehash的</strong>。这跟Java一次性直接rehash是有区别的。</p>
<p>在对哈希表进行扩展或者收缩操作时，reash过程并不是一次性地完成的，而是<strong>渐进式</strong>地完成的。</p>
<p>Redis在rehash时采取渐进式的原因：<strong>数据量如果过大的话，一次性rehash会有庞大的计算量，这很可能导致服务器一段时间内停止服务</strong>。</p>
<p>Redis具体rehash过程：</p>
<ul>
<li>1.在字典中维持一个索引计数器变量rehashidx，并将设置为0，表示rehash开始。</li>
<li>2.在rehash期间每次对字典进行增加、查询、删除和更新操作时，<strong>除了执行指定命令外</strong>；还会将ht[0]中rehashidx索引上的值**rehash到ht[1]**，操作完成后rehashidx+1。</li>
<li>3.字典操作不断执行，最终在某个时间点，所有的键值对完成rehash，这时<strong>将rehashidx设置为-1，表示rehash完成</strong></li>
<li>4.在渐进式rehash过程中，字典会同时使用两个哈希表ht[0]和ht[1]，所有的更新、删除、查找操作也会在两个哈希表进行。例如要查找一个键的话，<strong>服务器会优先查找ht[0]，如果不存在，再查找ht[1]**，诸如此类。此外当执行</strong>新增操作<strong>时，新的键值对</strong>一律保存到ht[1]**，不再对ht[0]进行任何操作，以保证ht[0]的键值对数量只减不增，直至变为空表。</li>
</ul>
<hr>
<h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><p>跳跃表(shiplist)是实现sortset(<strong>有序</strong>集合)的底层数据结构之一！</p>
<p>Redis的跳跃表实现由zskiplist和zskiplistNode两个结构组成。其中<strong>zskiplist保存跳跃表的信息</strong>(表头，表尾节点，长度)，<strong>zskiplistNode则表示跳跃表的节点</strong>。</p>
<p>zskiplistNode跳跃表节点的结构：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typeof struct zskiplistNode {
        // 后退指针
        struct zskiplistNode *backward;
        // 分值
        double score;
        // 成员对象
        robj *obj;
        // 层
        struct zskiplistLevel {
                // 前进指针
                struct zskiplistNode *forward;
                // 跨度
                unsigned int span;
        } level[];
} zskiplistNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>zskiplist的结构如下：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typeof struct zskiplist {
        // 表头节点，表尾节点
        struct skiplistNode *header,*tail;
        // 表中节点数量
        unsigned long length;
        // 表中最大层数
        int level;
} zskiplist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h2><p>整数集合是set(集合)的底层数据结构之一。当一个set(集合)<strong>只包含整数值元素</strong>，并且<strong>元素的数量不多</strong>时，Redis就会采用整数集合(intset)作为set(集合)的底层实现。</p>
<p>整数集合(intset)保证了元素是<strong>不会出现重复</strong>的，并且是<strong>有序</strong>的(从小到大排序)，intset的结构是这样子的：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typeof struct intset {
        // 编码方式
        unit32_t encoding;
        // 集合包含的元素数量
        unit32_t lenght;
        // 保存元素的数组
        int8_t contents[];
} intset;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>虽然intset结构将contents属性声明为int8_t类型的数组，但实际上contents数组并不保存任何int8_t类型的值，<strong>contents数组的真正类型取决于encoding属性的值</strong>：</p>
<ul>
<li>INTSET_ENC_INT16</li>
<li>INTSET_ENC_INT32</li>
<li>INTSET_ENC_INT64</li>
</ul>
<p>从编码格式的名字我们就可以知道，16,32,64编码对应能存放的数字范围是不一样的。16明显最少，64明显最大。</p>
<p>如果本来是INTSET_ENC_INT16的编码，想要存放大于INTSET_ENC_INT16编码能存放的整数值，此时就得编码<strong>升级</strong>(从16升级成32或者64)。步骤如下：</p>
<ul>
<li>1）根据新元素类型拓展整数集合底层数组的空间并为新元素分配空间。</li>
<li>2）将底层数组现有的所以元素都转换成与新元素相同的类型，并将类型转换后的元素放到正确的位上，需要维持底层数组的有序性质不变。</li>
<li>3）将新元素添加到底层数组。</li>
</ul>
<p><strong>只支持升级操作，并不支持降级操作</strong>。</p>
<hr>
<h2 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h2><p>压缩列表(ziplist)是list和hash的底层实现之一。如果list的每个都是小整数值，或者是比较短的字符串，压缩列表(ziplist)作为list的底层实现。</p>
<p>压缩列表(ziplist)是Redis为了节约内存而开发的，是由一系列的<strong>特殊编码的连续内存块</strong>组成的<strong>顺序性</strong>数据结构。</p>
<blockquote>
<p>压缩列表从表尾节点<strong>倒序遍历</strong>，首先指针通过zltail偏移量指向表尾节点，然后通过指向<strong>节点记录的前一个节点的长度依次向前遍历访问整个压缩列表</strong>。</p>
</blockquote>
<hr>
<h2 id="Redis中数据结构的对象"><a href="#Redis中数据结构的对象" class="headerlink" title="Redis中数据结构的对象"></a>Redis中数据结构的对象</h2><p>有了上面的介绍，下面的表格就好理解了</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>编码</th>
<th>对象</th>
</tr>
</thead>
<tbody><tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_INT</td>
<td>使用整数值实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_EMBSTR</td>
<td>使用embstr编码的简单动态字符串实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_RAW</td>
<td>使用简单动态字符串实现的字符串对象</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的列表对象</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_LINKEDLIST</td>
<td>使用双端链表实现的列表对象</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的哈希对象</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的哈希对象</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_INTSET</td>
<td>使用整数集合实现的集合对象</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的集合对象</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的有序集合对象</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_SKIPLIST</td>
<td>使用跳跃表和字典实现的有序集合对象</td>
</tr>
</tbody></table>
<hr>
<h3 id="字符串（String）对象"><a href="#字符串（String）对象" class="headerlink" title="字符串（String）对象"></a>字符串（String）对象</h3><p>在上面的表我们知道string类型有三种<strong>编码格式</strong>：</p>
<ul>
<li><p>int：整数值，这个整数值可以使用long类型来表示</p>
</li>
<li><ul>
<li>如果是浮点数，那就用embstr或者raw编码。具体用哪个就看这个数的长度了</li>
</ul>
</li>
<li><p>embstr：字符串值，这个字符串值的长度小于32字节</p>
</li>
<li><p>raw：字符串值，这个字符串值的长度大于32字节</p>
</li>
</ul>
<p>embstr和raw的<strong>区别</strong>：</p>
<ul>
<li>raw分配内存和释放内存的次数是两次，embstr是一次</li>
<li>embstr编码的数据保存在一块<strong>连续</strong>的内存里面</li>
</ul>
<p>编码之间的<strong>转换</strong>：</p>
<ul>
<li>int类型如果存的<strong>不再是一个整数值</strong>，则会从int转成raw</li>
<li>embstr是只读的，在修改的时候回从embstr转成raw</li>
</ul>
<hr>
<h3 id="列表（list）对象"><a href="#列表（list）对象" class="headerlink" title="列表（list）对象"></a>列表（list）对象</h3><p>在上面的表我们知道list类型有两种<strong>编码格式</strong>：</p>
<ul>
<li>ziplist：字符串元素的长度都小于64个字节<code>&amp;&amp;</code>总数量少于512个</li>
<li>linkedlist：字符串元素的长度大于64个字节<code>||</code>总数量大于512个</li>
</ul>
<p>编码之间的<strong>转换：</strong></p>
<ul>
<li>原本是ziplist编码的，如果保存的数据长度太大或者元素数量过多，会转换成linkedlist编码的。</li>
</ul>
<hr>
<h3 id="哈希（hash）对象"><a href="#哈希（hash）对象" class="headerlink" title="哈希（hash）对象"></a>哈希（hash）对象</h3><p>在上面的表我们知道hash类型有两种<strong>编码格式</strong>：</p>
<ul>
<li>ziplist：key和value的字符串长度都小于64字节<code>&amp;&amp;</code>键值对总数量小于512</li>
<li>hashtable：key和value的字符串长度大于64字节<code>||</code>键值对总数量大于512</li>
</ul>
<p>编码之间的<strong>转换：</strong></p>
<ul>
<li>原本是ziplist编码的，如果保存的数据长度太大或者元素数量过多，会转换成hashtable编码的。</li>
</ul>
<hr>
<h3 id="集合（set）对象"><a href="#集合（set）对象" class="headerlink" title="集合（set）对象"></a>集合（set）对象</h3><p>在上面的表我们知道set类型有两种<strong>编码格式</strong>：</p>
<ul>
<li>intset：保存的元素全都是整数<code>&amp;&amp;</code>总数量小于512</li>
<li>hashtable：保存的元素不是整数<code>||</code>总数量大于512</li>
</ul>
<p>编码之间的<strong>转换：</strong></p>
<ul>
<li>原本是intset编码的，如果保存的数据不是整数值或者元素数量大于512，会转换成hashtable编码的。</li>
</ul>
<hr>
<h3 id="有序集合（sortset）对象"><a href="#有序集合（sortset）对象" class="headerlink" title="有序集合（sortset）对象"></a>有序集合（sortset）对象</h3><p>在上面的图我们知道set类型有两种<strong>编码格式</strong>：</p>
<ul>
<li>ziplist：元素长度小于64<code>&amp;&amp;</code>总数量小于128</li>
<li>skiplist：元素长度大于64<code>||</code>总数量大于128</li>
</ul>
<p>有序集合(sortset)对象<strong>同时采用skiplist和哈希表来实现</strong>：</p>
<ul>
<li>skiplist能够达到插入的时间复杂度为O(logn)，根据成员查分值的时间复杂度为O(1)</li>
</ul>
<p>编码之间的<strong>转换：</strong></p>
<ul>
<li>原本是ziplist编码的，如果保存的数据长度大于64或者元素数量大于128，会转换成skiplist编码的。</li>
</ul>
<hr>
<h2 id="Redis的一些细节"><a href="#Redis的一些细节" class="headerlink" title="Redis的一些细节"></a>Redis的一些细节</h2><ul>
<li><p>1.服务器在执行某些命令的时候，会<strong>先检查给定的键的类型</strong>能否执行指定的命令。</p>
</li>
<li><ul>
<li>比如我们的数据结构是sortset，但你使用了list的命令。这是不对的，服务器会检查一下我们的数据结构是什么才会进一步执行命令</li>
</ul>
</li>
<li><p>2.Redis的对象系统带有<strong>引用计数</strong>实现的<strong>内存回收机制</strong>。</p>
</li>
<li><ul>
<li>对象不再被使用的时候，对象所占用的内存会释放掉</li>
</ul>
</li>
<li><p>3.Redis会共享值为0到9999的字符串对象</p>
</li>
<li><p>4.对象<strong>会记录自己的最后一次被访问时间</strong>，这个时间可以用于计算对象的空转时间。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习-持久化</title>
    <url>/2021/06/14/redis-xue-xi-chi-jiu-hua/</url>
    <content><![CDATA[<h1 id="Redis学习-持久化"><a href="#Redis学习-持久化" class="headerlink" title="Redis学习-持久化"></a>Redis学习-持久化</h1><hr>
<h2 id="持久化简介"><a href="#持久化简介" class="headerlink" title="持久化简介"></a>持久化简介</h2><p><strong>Redis</strong> 的数据 <strong>全部存储</strong> 在 <strong>内存</strong> 中，如果 <strong>突然宕机</strong>，数据就会全部丢失，因此必须有一套机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的 <strong>持久化机制</strong>，它会将内存中的数据库状态 <strong>保存到磁盘</strong> 中。</p>
<h3 id="持久化发生了什么-从内存到磁盘"><a href="#持久化发生了什么-从内存到磁盘" class="headerlink" title="持久化发生了什么 | 从内存到磁盘"></a>持久化发生了什么 | 从内存到磁盘</h3><p>通常来说，从客户端发起请求开始，到服务器真实地写入磁盘，需要发生如下几件事情：</p>
<ol>
<li>客户端向数据库 <strong>发送写命令</strong> <em>(数据在客户端的内存中)</em></li>
<li>数据库 <strong>接收</strong> 到客户端的 <strong>写请求</strong> <em>(数据在服务器的内存中)</em></li>
<li>数据库 <strong>调用系统 API</strong> 将数据写入磁盘 <em>(数据在内核缓冲区中)</em></li>
<li>操作系统将 <strong>写缓冲区</strong> 传输到 <strong>磁盘控控制器</strong> <em>(数据在磁盘缓存中)</em></li>
<li>操作系统的磁盘控制器将数据 <strong>写入实际的物理媒介</strong> 中 <em>(数据在磁盘中)</em></li>
</ol>
<p><strong>注意:</strong> 上面的过程其实是 <strong>极度精简</strong> 的，在实际的操作系统中，<strong>缓存</strong> 和 <strong>缓冲区</strong> 会比这 <strong>多得多</strong>…</p>
<h3 id="如何尽可能保证持久化的安全"><a href="#如何尽可能保证持久化的安全" class="headerlink" title="如何尽可能保证持久化的安全"></a>如何尽可能保证持久化的安全</h3><p>如果我们故障仅仅涉及到 <strong>软件层面</strong> <em>(该进程被管理员终止或程序崩溃)</em> 并且没有接触到内核，那么在 <em>上述步骤 3</em> 成功返回之后，我们就认为成功了。即使进程崩溃，操作系统仍然会帮助我们把数据正确地写入磁盘。</p>
<p>如果我们考虑 <strong>停电/ 火灾</strong> 等 <strong>更具灾难性</strong> 的事情，那么只有在完成了第 <strong>5</strong> 步之后，才是安全的。</p>
<p>所以数据安全最重要的阶段是：<strong>步骤三、四、五</strong>，即：</p>
<ul>
<li>数据库软件调用写操作将用户空间的缓冲区转移到内核缓冲区的频率是多少？</li>
<li>内核多久从缓冲区取数据刷新到磁盘控制器？</li>
<li>磁盘控制器多久把数据写入物理媒介一次？</li>
<li><strong>注意：</strong> 如果真的发生灾难性的事件，我们可以从上图的过程中看到，任何一步都可能被意外打断丢失，所以只能 <strong>尽可能地保证</strong> 数据的安全，这对于所有数据库来说都是一样的。</li>
</ul>
<hr>
<h2 id="Redis持久化的两种方式"><a href="#Redis持久化的两种方式" class="headerlink" title="Redis持久化的两种方式"></a>Redis持久化的两种方式</h2><h3 id="方式一：快照"><a href="#方式一：快照" class="headerlink" title="方式一：快照"></a>方式一：快照</h3><p><strong>Redis 快照</strong> 是最简单的 Redis 持久性模式。当满足特定条件时，它将生成数据集的时间点快照，例如，如果先前的快照是在2分钟前创建的，并且现在已经至少有 <em>100</em> 次新写入，则将创建一个新的快照。此条件可以由用户配置 Redis 实例来控制，也可以在运行时修改而无需重新启动服务器。快照作为包含整个数据集的单个 <code>.rdb</code> 文件生成。</p>
<p>但我们知道，Redis 是一个 <strong>单线程</strong> 的程序，这意味着，我们不仅仅要响应用户的请求，还需要进行内存快照。而后者要求 Redis 必须进行 IO 操作，这会严重拖累服务器的性能。</p>
<p>还有一个重要的问题是，我们在 <strong>持久化的同时</strong>，<strong>内存数据结构</strong> 还可能在 <strong>变化</strong>，比如一个大型的 hash 字典正在持久化，结果一个请求过来把它删除了，可是这才刚持久化结束，咋办？</p>
<h4 id="使用系统多进程-COW-Copy-On-Write-机制-fork-函数"><a href="#使用系统多进程-COW-Copy-On-Write-机制-fork-函数" class="headerlink" title="使用系统多进程 COW(Copy On Write) 机制 | fork 函数"></a>使用系统多进程 COW(Copy On Write) 机制 | fork 函数</h4><p>操作系统多进程 <strong>COW(Copy On Write) 机制</strong> 拯救了我们。<strong>Redis</strong> 在持久化时会调用 <code>glibc</code> 的函数 <code>fork</code> 产生一个子进程，简单理解也就是基于当前进程 <strong>复制</strong> 了一个进程，主进程和子进程会共享内存里面的代码块和数据段：</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5tg3dvds7fg0.png" alt="image"></p>
<p><strong>过程大致如下：</strong></p>
<p>1.分配新的内存块和内核数据结构给子进程</p>
<p>2.将父进程部分数据结构内容拷贝至子进程</p>
<p>3.添加子进程到系统列表中</p>
<p>4.Fork返回，开始调度器调度</p>
<p><strong>为什么 fork 成功调用后会有两个返回值呢？</strong> 因为子进程在复制时复制了父进程的堆栈段，所以两个进程都停留在了 <code>fork</code> 函数中 <em>(都在同一个地方往下继续”同时”执行)*，等待返回，所以 *</em>一次在父进程中返回子进程的 pid，另一次在子进程中返回零，系统资源不够时返回负数*<em>。</em>(伪代码如下)*</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pid = os.fork()
if pid &gt; 0:
  handle_client_request()  # 父进程继续处理客户端请求
if pid == 0:
  handle_snapshot_write()  # 子进程处理快照写磁盘
if pid &lt; 0:
  # fork error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以 <strong>快照持久化</strong> 可以完全交给 <strong>子进程</strong> 来处理，<strong>父进程</strong> 则继续 <strong>处理客户端请求</strong>。<strong>子进程</strong> 做数据持久化，它 <strong>不会修改现有的内存数据结构</strong>，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。但是 <strong>父进程</strong> 不一样，它必须持续服务客户端请求，然后对 <strong>内存数据结构进行不间断的修改</strong>。</p>
<p>这个时候就会使用操作系统的 COW 机制来进行 <strong>数据段页面</strong> 的分离。数据段是由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将被共享的页面复 制一份分离出来，然后 <strong>对这个复制的页面进行修改</strong>。这时 <strong>子进程</strong> 相应的页面是 <strong>没有变化的</strong>，还是进程产生时那一瞬间的数据。</p>
<p>子进程因为数据没有变化，它能看到的内存里的数据在进程产生的一瞬间就凝固了，再也不会改变，这也是为什么 <strong>Redis</strong> 的持久化 <strong>叫「快照」的原因</strong>。接下来子进程就可以非常安心的遍历数据了进行序列化写磁盘了。</p>
<hr>
<h3 id="方式二：AOF"><a href="#方式二：AOF" class="headerlink" title="方式二：AOF"></a>方式二：AOF</h3><p><strong>快照不是很持久</strong>。如果运行 Redis 的计算机停止运行，电源线出现故障或者 <code>kill -9</code> 的实例意外发生，则写入 Redis 的最新数据将丢失。尽管这对于某些应用程序可能不是什么大问题，但有些使用案例具有充分的耐用性，在这些情况下，快照并不是可行的选择。</p>
<p><strong>AOF(Append Only File - 仅追加文件)</strong> 它的工作方式非常简单：每次执行 <strong>修改内存</strong> 中数据集的写操作时，都会 <strong>记录</strong> 该操作。假设 AOF 日志记录了自 Redis 实例创建以来 <strong>所有的修改性指令序列</strong>，那么就可以通过对一个空的 Redis 实例 <strong>顺序执行所有的指令</strong>，也就是 <strong>「重放」</strong>，来恢复 Redis 当前实例的内存数据结构的状态。</p>
<p>当 Redis 收到客户端修改指令后，会先进行参数校验、逻辑处理，如果没问题，就 <strong>立即</strong> 将该指令文本 <strong>存储</strong> 到 AOF 日志中，也就是说，<strong>先执行指令再将日志存盘</strong>。这一点不同于 <code>MySQL</code>、<code>LevelDB</code>、<code>HBase</code> 等存储引擎，如果我们先存储日志再做逻辑处理，这样就可以保证即使宕机了，我们仍然可以通过之前保存的日志恢复到之前的数据状态，但是 <strong>Redis 为什么没有这么做呢？</strong></p>
<p>Emmm… 没找到特别满意的答案。。。。。。</p>
<h4 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h4><p><strong>Redis</strong> 在长期运行的过程中，AOF 的日志会越变越长。如果实例宕机重启，重放整个 AOF 日志会非常耗时，导致长时间 Redis 无法对外提供服务。所以需要对 **AOF 日志 “瘦身”**。</p>
<p><strong>Redis</strong> 提供了 <code>bgrewriteaof</code> 指令用于对 AOF 日志进行瘦身。其 <strong>原理</strong> 就是 <strong>开辟一个子进程</strong> 对内存进行 <strong>遍历</strong> 转换成一系列 Redis 的操作指令，<strong>序列化到一个新的 AOF 日志文件</strong> 中。序列化完毕后再将操作期间发生的 <strong>增量 AOF 日志</strong> 追加到这个新的 AOF 日志文件中，追加完毕后就立即替代旧的 AOF 日志文件了，瘦身工作就完成了。</p>
<h4 id="fsync"><a href="#fsync" class="headerlink" title="fsync"></a>fsync</h4><p>AOF 日志是以文件的形式存在的，当程序对 AOF 日志文件进行写操作时，实际上是将内容写到了内核为文件描述符分配的一个内存缓存中，然后内核会异步将脏数据刷回到磁盘的。</p>
<p>就像我们 <em>上方第四步</em> 描述的那样，我们需要借助 <code>glibc</code> 提供的 <code>fsync(int fd)</code> 函数来讲指定的文件内容 <strong>强制从内核缓存刷到磁盘</strong>。但 <strong>“强制开车”</strong> 仍然是一个很消耗资源的一个过程，需要 **”节制”**！通常来说，生产环境的服务器，Redis 每隔 1s 左右执行一次 <code>fsync</code> 操作就可以了。</p>
<p>Redis 同样也提供了另外两种策略，一个是 <strong>永不 <code>fsync</code>**，来让操作系统来决定合适同步磁盘，很不安全，另一个是 **来一个指令就 <code>fsync</code> 一次</strong>，非常慢。但是在生产环境基本不会使用，了解一下即可。</p>
<hr>
<h2 id="Redis-4-0-混合持久化"><a href="#Redis-4-0-混合持久化" class="headerlink" title="Redis 4.0 混合持久化"></a>Redis 4.0 混合持久化</h2><p>重启 Redis 时，我们很少使用 <code>rdb</code> 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 <code>rdb</code> 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。</p>
<p><strong>Redis 4.0</strong> 为了解决这个问题，带来了一个新的持久化选项——<strong>混合持久化</strong>。将 <code>rdb</code> 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 <strong>自持久化开始到持久化结束</strong> 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小：</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.jbnwru3d2vc.png" alt="image"></p>
<p>于是在 Redis 重启的时候，可以先加载 <code>rdb</code> 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。</p>
]]></content>
      <categories>
        <category>Redis学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>算法备忘录</title>
    <url>/2021/06/03/suan-fa-bei-wang-lu/</url>
    <content><![CDATA[<h1 id="算法备忘录"><a href="#算法备忘录" class="headerlink" title="算法备忘录"></a>算法备忘录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    此文章并不讲解算法的具体实现，只存储一些算法模板，以便复习。</p>
<span id="more"></span>



<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><hr>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studySort</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> quickSort <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i <span class="token operator">=</span> l<span class="token punctuation">;</span>
        j <span class="token operator">=</span> r<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studySort</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> mergeSort <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> l<span class="token punctuation">,</span> k <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>l <span class="token operator">+</span> t<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studySort</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> heapSort <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                    <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span>
                    <span class="token operator">:</span> left<span class="token punctuation">;</span>
            largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> largest<span class="token punctuation">;</span>
            left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">HeapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studySort</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> bucketSort <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">BucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> mi <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ma <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mi <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mi<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>ma <span class="token operator">-</span> mi<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> mi<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">BucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h2><hr>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><blockquote>
<p>解决模式串匹配问题，时间复杂度：O(N + M)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyString</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> studyKMP <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> j <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">-</span> j <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cur<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cur <span class="token operator">=</span> next<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abcaabcfv"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abcfv"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">KMP</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h3><blockquote>
<p>解决求最长回文子串长度的问题，时间复杂度：O(N)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyString</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> studyManacher <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">manacherString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'#'</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">manacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> <span class="token function">manacherString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>charArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> charArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">&gt;</span> i <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>pArr<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">C</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> charArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> charArr<span class="token punctuation">[</span>i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">R</span> <span class="token operator">=</span> i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">C</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abcbaabcbaf"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">manacher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h2><hr>
<h3 id="BFPRT算法"><a href="#BFPRT算法" class="headerlink" title="BFPRT算法"></a>BFPRT算法</h3><blockquote>
<p>解决求第几大的数的问题，时间复杂度：O(N)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyOther</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> studyBFPRT <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">!=</span> begin<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> end <span class="token operator">+</span> begin<span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> pivotValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> small <span class="token operator">=</span> begin <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> begin<span class="token punctuation">;</span>
        <span class="token keyword">int</span> big <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> big<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivotValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>small<span class="token punctuation">,</span> cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivotValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> <span class="token operator">--</span>big<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cur<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> small <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> big <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> range<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">medianOfMedians</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> offset <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> beginI <span class="token operator">=</span> begin <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> endI <span class="token operator">=</span> beginI <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>
            mArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getMedian</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> beginI<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> endI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">bfprt</span><span class="token punctuation">(</span>mArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mArr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bfprt</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">medianOfMedians</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pivotRange <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> pivotRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> pivotRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pivotRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">bfprt</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> pivotRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">bfprt</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMinKthByBFPRT</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copyArr <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">bfprt</span><span class="token punctuation">(</span>copyArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copyArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMinKNumsByBFPRT</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">&gt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
        <span class="token keyword">int</span> minKth <span class="token operator">=</span> <span class="token function">getMinKthByBFPRT</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minKth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">!=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> minKth<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token function">getMinKNumsByBFPRT</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="设计LRU缓存"><a href="#设计LRU缓存" class="headerlink" title="设计LRU缓存"></a>设计LRU缓存</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyOther</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> studyLRU <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 双向链表</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果一个新的节点加入，就放到尾巴上去</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                newNode<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 双向链表上一定有这个node</span>
        <span class="token comment">// node分离出，但是node前后环境重新连接</span>
        <span class="token comment">// node放到尾巴上去</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveNodeToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>last <span class="token operator">=</span> node<span class="token punctuation">.</span>last<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            node<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyNodeMap<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> nodeList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>capacity <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"should be more than 0."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>nodeList<span class="token punctuation">.</span><span class="token function">moveNodeToTail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>nodeList<span class="token punctuation">.</span><span class="token function">moveNodeToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>nodeList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeMostUnusedCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeMostUnusedCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> removeNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nodeList<span class="token punctuation">.</span><span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>removeNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> testCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h3><blockquote>
<p>以非递归的方式遍历二叉树，且不需要额外空间。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyTree</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>plaf<span class="token punctuation">.</span></span><span class="token class-name">IconUIResource</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> morrisTree <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
        <span class="token keyword">int</span> val<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 中序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisIn</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 前序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPre</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 后序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">morrisPos</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mostRight<span class="token punctuation">.</span>right <span class="token operator">!=</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token function">printEdge</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printEdge</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEdge</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> tail <span class="token operator">=</span> <span class="token function">reverseEdge</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">reverseEdge</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseEdge</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>from <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next <span class="token operator">=</span> from<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            from<span class="token punctuation">.</span>right <span class="token operator">=</span> pre<span class="token punctuation">;</span>
            pre <span class="token operator">=</span> from<span class="token punctuation">;</span>
            from <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">morrisIn</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">morrisPre</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">morrisPos</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="实现跳表"><a href="#实现跳表" class="headerlink" title="实现跳表"></a>实现跳表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">studyListNode</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>

<span class="token comment">// 跳表</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudySkipList</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SkipListNode</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkipListNode</span><span class="token punctuation">&gt;</span></span> nextNodes<span class="token punctuation">;</span> <span class="token comment">// 长度为层数 nextNodes[0]为第一层上，下一个节点是啥</span>

        <span class="token keyword">public</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            nextNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkipListNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SkipList</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">SkipListNode</span> head<span class="token punctuation">;</span> <span class="token comment">// 巨小</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> maxLevel<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 加进来了多少个Key</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PROBABILITY <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">SkipList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            head<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">SkipListNode</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">contains</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                size<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> PROBABILITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    level<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>level <span class="token operator">&gt;</span> maxLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    head<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    maxLevel<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">SkipListNode</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SkipListNode</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    current <span class="token operator">=</span> <span class="token function">findNext</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> current<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    newNode<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> current<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    current<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>level<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> deleteValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">contains</span><span class="token punctuation">(</span>deleteValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">SkipListNode</span> deleteNode <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>deleteValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                size<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> level <span class="token operator">=</span> maxLevel<span class="token punctuation">;</span>
                <span class="token class-name">SkipListNode</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    current <span class="token operator">=</span> <span class="token function">findNext</span><span class="token punctuation">(</span>deleteNode<span class="token punctuation">.</span>value<span class="token punctuation">,</span> current<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>deleteNode<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        current<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> deleteNode<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>level<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token class-name">SkipListNode</span> <span class="token function">findNext</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> e<span class="token punctuation">,</span> <span class="token class-name">SkipListNode</span> current<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SkipListNode</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Integer</span> value <span class="token operator">=</span> next<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">lessThan</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                current <span class="token operator">=</span> next<span class="token punctuation">;</span>
                next <span class="token operator">=</span> current<span class="token punctuation">.</span>nextNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> size<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SkipListNode</span> node <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">equalTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token class-name">SkipListNode</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> head<span class="token punctuation">,</span> maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token class-name">SkipListNode</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> e<span class="token punctuation">,</span> <span class="token class-name">SkipListNode</span> current<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                current <span class="token operator">=</span> <span class="token function">findNext</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> current<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>level<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">lessThan</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>进程间的通信方式</title>
    <url>/2021/06/04/jin-cheng-jian-de-tong-xin-fang-shi/</url>
    <content><![CDATA[<h1 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>相信不少同学面试时都遇到过进程通信方式这个问题，同时这个问题也是操作系统的高频面试题。虽然我目前的面试还没遇到过这个问题，不过我的室友已经相继遭重了。所以，我也进行了充分的准备，如果面试官问到这个问题，我最起码能跟他掰扯个10分钟。</p>
<p>废话不多说，我们直接开搞！</p>
<p>等等！！！开搞前我们要先明白一个概念，就是每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以进程之间要通信必须通过内核。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.25zptb39t8qo.png"></p>
<h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><hr>
<p>管道通信分为匿名管道（无名管道）和命名管道（有名管道）</p>
<p>先说匿名管道，先看下面这个linux命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> auxf <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>“|”是<strong>管道</strong>的意思，它的作用就是把前一条命令的输出作为后一条命令的输入。在这里就是把 netstat -tulnp 的输出结果作为 grep 8080 这条命令的输入。从这功能描述，可以看出<strong>管道传输数据是单向的</strong>，如果想相互通信，我们需要创建两个管道才行。</p>
<p>而这种管道是没有名字的，所以用”|”表示的管道称为匿名管道，用完了就销毁。</p>
<p>而命名管道的创建需要指定管道名字，如下面的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkfifo</span> pangHaiRui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>pangHaiRui就是管道的名称，接下来我们用一个进程向这个管道里写数据，然后让另一个进程读出来。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"pangHaiRui offer!"</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">test</span>	//写数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个时候管道的内容没有被读出的话，那么这个命令就会一直停在这里，只有当另外一个进程把 test 里面的内容读出来的时候这条命令才会结束。接下来我们用另外一个进程来读取</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">&lt;</span> <span class="token builtin class-name">test</span> //读数据
pangHaiRui offer<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>从上面的例子可以看出，管道的通知机制类似于<strong>缓存</strong>，就像一个进程把数据放在某个缓存区域，然后等着另外一个进程去拿，并且是管道是<strong>单向传输的。</strong></p>
<p>这就说明，<strong>管道这种通信方式效率低，不适合进程间频繁地交换数据</strong>。当然，它的好处，自然就是简单，同时也我们很容易得知管道里的数据已经被另一个进程读取了。</p>
<blockquote>
<p>匿名管道创建的原理</p>
</blockquote>
<p>匿名管道的创建，需要通过下面的系统调用：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int pipe(int fd[2])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里表示创建一个匿名管道，并返回了两个描述符，一个是管道的读取端描述符 <code>fd[0]</code>，另一个是管道的写入端描述符 <code>fd[1]</code>。注意，这个匿名管道是特殊的文件，只存在于内存，不存于文件系统中。</p>
<p>但是这两个描述符都是在一个进程里面，并没有起到进程间通信的作用，怎么样才能使得管道是跨过两个进程的呢？</p>
<p>我们可以使用 <code>fork</code> 创建子进程，<strong>创建的子进程会复制父进程的文件描述符</strong>，这样就做到了两个进程各有两个「 <code>fd[0]</code> 与 <code>fd[1]</code>」，两个进程就可以通过各自的 fd 写入和读取同一个管道文件实现跨进程通信了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5w0crtkoyjg0.png"></p>
<p>管道只能一端写入，另一端读出，所以上面这种模式容易造成混乱，因为父进程和子进程都可以同时写入，也都可以读出。那么，为了避免这种情况，通常的做法是：</p>
<ul>
<li>父进程关闭读取的 fd[0]，只保留写入的 fd[1]；</li>
<li>子进程关闭写入的 fd[1]，只保留读取的 fd[0]；</li>
</ul>
<p>所以说如果需要双向通信，则应该创建两个管道。</p>
<p>到这里，我们仅仅解析了使用管道进行父进程与子进程之间的通信，但是在我们 shell 里面并不是这样的。</p>
<p>在 shell 里面执行 <code>A | B</code>命令的时候，A 进程和 B 进程都是 shell 创建出来的子进程，A 和 B 之间不存在父子关系，它俩的父进程都是 shell。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.4tq93d8gms20.png"></p>
<p>所以说，在 shell 里通过「<code>|</code>」匿名管道将多个命令连接在一起，实际上也就是创建了多个子进程，那么在我们编写 shell 脚本时，能使用一个管道搞定的事情，就不要多用一个管道，这样可以减少创建子进程的系统开销。</p>
<p>我们可以得知，<strong>对于匿名管道，它的通信范围是存在父子关系的进程</strong>。因为管道没有实体，也就是没有管道文件，只能通过 fork 来复制父进程 fd 文件描述符，来达到通信的目的。</p>
<p>另外，<strong>对于命名管道，它可以在不相关的进程间也能相互通信</strong>。因为命令管道，提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。</p>
<p>不管是匿名管道还是命名管道，进程写入的数据都是缓存在内核中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循<strong>先进先出</strong>原则，不支持 lseek 之类的文件定位操作。</p>
<p>到这里管道通信就介绍完了，从上面我们可以看出管道通信虽然简单，但是效率很低，那么我们接下来讲讲消息队列通信方式，看看消息队列有没有什么新花样。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><hr>
<p>前面说到管道的通信方式是效率低的，因此管道不适合进程间频繁地交换数据。</p>
<p>那我们能不能把进程的数据放在某个内存之后就马上让进程返回呢？无需等待其他进程来取就返回呢？</p>
<p>答案是可以的，我们可以用<strong>消息队列</strong>的通信模式来解决这个问题，例如 a 进程要给 b 进程发送消息，只需要把消息放在对应的消息队列里就行了，b 进程需要的时候再去对应的<br>消息队列里取出来。同理，b 进程要个 a 进程发送消息也是一样。这种通信方式类似于<strong>缓存</strong>。</p>
<p>再来，<strong>消息队列是保存在内核中的消息链表</strong>，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。</p>
<p>消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在，而前面提到的匿名管道的生命周期，是随进程的创建而建立，随进程的结束而销毁。</p>
<p>消息这种模型，两个进程之间的通信就像平时发邮件一样，你来一封，我回一封，可以频繁沟通了。但邮件的通信方式存在不足的地方有两点，<strong>一是通信不及时，二是附件也有大小限制</strong>，这同样也是消息队列通信不足的点。</p>
<p><strong>消息队列不适合比较大数据的传输</strong>，因为在内核中每个消息体都有一个最大长度的限制，同时所有队列所包含的全部消息体的总长度也是有上限。在 Linux 内核中，会有两个宏定义 <code>MSGMAX</code> 和 <code>MSGMNB</code>，它们以字节为单位，分别定义了一条消息的最大长度和一个队列的最大长度。</p>
<p>如果 a 进程发送的数据占的内存比较大，并且两个进程之间的通信特别频繁的话，消息队列模型就不大适合了。因为 a 发送的数据很大的话，意味<strong>发送消息（拷贝）</strong>这个过程需要花很多时间来读内存。</p>
<p><strong>消息队列通信过程中，存在用户态与内核态之间的数据拷贝开销</strong>，因为进程写入数据到内核中的消息队列时，会发生从用户态拷贝数据到内核态的过程，同理另一进程读取内核中的消息数据时，会发生从内核态拷贝数据到用户态的过程。</p>
<p>那有没有什么解决方案呢？当然，这就轮到我们的共享内存出场了。</p>
<h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><hr>
<p>消息队列的读取和写入的过程，都会有发生用户态与内核态之间的消息拷贝过程。那<strong>共享内存</strong>的方式，就很好的解决了这一问题。</p>
<p>现代操作系统，对于内存管理，采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。所以，即使进程 A 和 进程 B 的虚拟地址是一样的，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。</p>
<p><strong>共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中</strong>。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去，大大提高了进程间通信的速度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1ovfie2lztmo.png" alt="image"></p>
<p>用了共享内存通信方式，带来新的问题，那就是如果多个进程同时修改同一个共享内存，很有可能就冲突了。例如两个进程都同时写一个地址，那先写的那个进程会发现内容被别人覆盖了。</p>
<p>这就需要接下来的大哥登场了，让我们看看信号量通信是如何防止多进程竞争共享资源，而造成数据错乱的。</p>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><hr>
<p><strong>信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据</strong>。</p>
<p>信号量表示资源的数量，控制信号量的方式有两种原子操作：</p>
<ul>
<li>一个是 <strong>P 操作</strong>，这个操作会把信号量减去 -1，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &gt;= 0，则表明还有资源可使用，进程可正常继续执行。</li>
<li>另一个是 <strong>V 操作</strong>，这个操作会把信号量加上 1，相加后如果信号量 &lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程；</li>
</ul>
<p>P 操作是用在进入共享资源之前，V 操作是用在离开共享资源之后，这两个操作是必须成对出现的。</p>
<p><strong>互斥信号量</strong>可以保证共享内存在任何时刻只有一个进程在访问，这就很好的保护了共享内存。</p>
<p>另外，在多进程里，每个进程并不一定是顺序执行的，它们基本是以各自独立的、不可预知的速度向前推进，但有时候我们又希望多个进程能密切合作，以实现一个共同的任务。</p>
<p>这个时候就需要<strong>同步信号量</strong>来解决同步问题了。</p>
<p>信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。所以说，信号量也是进程之间的一种通信方式。</p>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><hr>
<p>上面说的进程间通信，都是常规状态下的工作模式。<strong>对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。</strong></p>
<p>信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。</p>
<p>信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令）。</p>
<p>信号是进程间通信机制中<strong>唯一的异步通信机制</strong>，因为可以在任何时候发送信号给某一进程，一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。</p>
<p><strong>1.执行默认操作</strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM 信号，就是终止进程的意思。Core 的意思是 Core Dump，也即终止进程后，通过 Core Dump 将当前进程的运行状态保存在文件里面，方便程序员事后进行分析问题在哪里。</p>
<p><strong>2.捕捉信号</strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</p>
<p><strong>3.忽略信号</strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 <code>SIGKILL</code> 和 <code>SEGSTOP</code>，它们用于在任何时候中断或结束某一进程。</p>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><hr>
<p>前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想<strong>跨网络与不同主机上的进程之间通信，就需要 Socket 通信了。</strong></p>
<p>例如我们平时通过浏览器发起一个 http 请求，然后服务器给你返回对应的数据，这种就是采用 Socket 的通信方式了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>由于每个进程的用户空间都是独立的，不能相互访问，这时就需要借助内核空间来实现进程间通信，原因很简单，每个进程都是共享一个内核空间。</p>
<p>Linux 内核提供了不少进程间通信的方式，其中最简单的方式就是管道，管道分为「匿名管道」和「命名管道」。</p>
<p><strong>匿名管道</strong>顾名思义，它没有名字标识，匿名管道是特殊文件只存在于内存，没有存在于文件系统中，shell 命令中的「<code>|</code>」竖线就是匿名管道，通信的数据是<strong>无格式的流并且大小受限</strong>，通信的方式是<strong>单向</strong>的，数据只能在一个方向上流动，如果要双向通信，需要创建两个管道，再来<strong>匿名管道是只能用于存在父子关系的进程间通信</strong>，匿名管道的生命周期随着进程创建而建立，随着进程终止而消失。</p>
<p><strong>命名管道</strong>突破了匿名管道只能在亲缘关系进程间的通信限制，因为使用命名管道的前提，需要在文件系统创建一个类型为 p 的设备文件，那么毫无关系的进程就可以通过这个设备文件进行通信。另外，不管是匿名管道还是命名管道，进程写入的数据都是<strong>缓存在内核</strong>中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循<strong>先进先出</strong>原则，不支持 lseek 之类的文件定位操作。</p>
<p><strong>消息队列</strong>克服了管道通信的数据是无格式的字节流的问题，消息队列实际上是保存在内核的「消息链表」，消息队列的消息体是可以用户自定义的数据类型，发送数据时，会被分成一个一个独立的消息体，当然接收数据时，也要与发送方发送的消息体的数据类型保持一致，这样才能保证读取的数据是正确的。消息队列通信的速度不是最及时的，毕竟<strong>每次数据的写入和读取都需要经过用户态与内核态之间的拷贝过程。</strong></p>
<p><strong>共享内存</strong>可以解决消息队列通信中用户态与内核态之间数据拷贝过程带来的开销，<strong>它直接分配一个共享空间，每个进程都可以直接访问</strong>，就像访问进程自己的空间一样快捷方便，不需要陷入内核态或者系统调用，大大提高了通信的速度，享有<strong>最快</strong>的进程间通信方式之名。但是便捷高效的共享内存通信，<strong>带来新的问题，多进程竞争同个共享资源会造成数据的错乱。</strong></p>
<p>那么，就需要<strong>信号量</strong>来保护共享资源，以确保任何时刻只能有一个进程访问共享资源，这种方式就是互斥访问。<strong>信号量不仅可以实现访问的互斥性，还可以实现进程间的同步</strong>，信号量其实是一个计数器，表示的是资源个数，其值可以通过两个原子操作来控制，分别是 <strong>P 操作和 V 操作</strong>。</p>
<p>与信号量名字很相似的叫<strong>信号</strong>，它俩名字虽然相似，但功能一点儿都不一样。信号是进程间通信机制中<strong>唯一的异步通信机制</strong>，信号可以在应用进程和内核之间直接交互，内核也可以利用信号来通知用户空间的进程发生了哪些系统事件，信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令），一旦有信号发生，<strong>进程有三种方式响应信号 1. 执行默认操作、2. 捕捉信号、3. 忽略信号</strong>。有两个信号是应用进程无法捕捉和忽略的，即 <code>SIGKILL</code> 和 <code>SEGSTOP</code>，这是为了方便我们能在任何时候结束或停止某个进程。</p>
<p>前面说到的通信机制，都是工作于同一台主机，如果<strong>要与不同主机的进程间通信，那么就需要 Socket 通信了</strong>。Socket 实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信，可根据创建 Socket 的类型不同，分为三种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式，一个是本地进程间通信方式。</p>
<p>以上，就是进程间通信的主要机制了。你可能会问了，那线程通信间的方式呢？</p>
<p>同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信，比如全局变量，所以对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步：</p>
<ul>
<li>互斥的方式，可保证任意时刻只有一个线程访问共享资源；</li>
<li>同步的方式，可保证线程 A 应在线程 B 之前执行；</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><hr>
<p>看了上面的描述，你应该知道面试的时候该怎么和面试官”对线”了吧，先介绍管道通信，然后说一下管道通信的缺点，紧接着引出消息队列，再说消息队列的缺点，再引出共享内存，之后说出共享内存的局限性，然后引出信号量……</p>
<p>我相信这一套组合拳下来，面试官肯定会对你印象深刻。而这，就是成功的开始。</p>
<p>本篇文章基本都是参照熬丙的文章写的，主要是他写的太好了！！！在这里记录下来，也方便我回来复习。</p>
<p>最后，祝大家都能收到自己心仪的offer~</p>
]]></content>
      <categories>
        <category>面试指南</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>面试指南</tag>
      </tags>
  </entry>
  <entry>
    <title>WebMagic + Selenium + 无头浏览器</title>
    <url>/2021/07/09/webmagic-wu-tou-liu-lan-qi/</url>
    <content><![CDATA[<h1 id="WebMagic-Selenium-无头浏览器"><a href="#WebMagic-Selenium-无头浏览器" class="headerlink" title="WebMagic + Selenium + 无头浏览器"></a>WebMagic + Selenium + 无头浏览器</h1><hr>
<h2 id="WebMagic学习"><a href="#WebMagic学习" class="headerlink" title="WebMagic学习"></a>WebMagic学习</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>WebMagic项目代码分为核心和扩展两部分。</p>
<p>核心部分主要是精简的爬虫实现。（提供简单灵活的Api）</p>
<p>扩展部分主要是一些便利、实用性的功能。（例如注解模式编写爬虫）</p>
<h3 id="微内核和高可扩展性"><a href="#微内核和高可扩展性" class="headerlink" title="微内核和高可扩展性"></a>微内核和高可扩展性</h3><p>WebMagic由四个组件（Downloader、PageProcessor、Scheduler、Pipeline）构成，主要是将这些组件结合并完成多线程的任务。</p>
<p>这样，就可以对爬虫功能做定制</p>
<h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><p>WebMagic主要是由上面的四个组件组成并由Spider将它们彼此组织起来。</p>
<p>Spider是一个大的容器，它也是WebMagic逻辑的核心。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5os44cheh780.png"></p>
<h3 id="WebMagic的四个组件"><a href="#WebMagic的四个组件" class="headerlink" title="WebMagic的四个组件"></a>WebMagic的四个组件</h3><ul>
<li>Downloader : 负责从互联网上下载页面，WebMagic默认使用了<a href="http://hc.apache.org/index.html">Apache HttpClient</a>作为下载工具。</li>
<li>PageProcessor : 负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用<a href="http://jsoup.org/">Jsoup</a>作为HTML解析工具，并基于其开发了解析XPath的工具<a href="https://github.com/code4craft/xsoup">Xsoup</a>。</li>
<li>Scheduler : 负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</li>
<li>Pipeline : 负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</li>
</ul>
<blockquote>
<p>PageProcessor对于每个站点每个页面都不一样，是需要使用者定制的部分</p>
<p>除非项目有一些特殊的分布式需求，否则无需自己定制Scheduler</p>
<p>Pipeline定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline，对于一类需求一般只编写一个Pipeline</p>
</blockquote>
<h3 id="用于数据流流转的对象"><a href="#用于数据流流转的对象" class="headerlink" title="用于数据流流转的对象"></a>用于数据流流转的对象</h3><blockquote>
<p>Request</p>
</blockquote>
<p>是对URL地址的一层封装，一个Request对应一个URL地址。</p>
<p>它是PageProcessor与Downloader交互的载体，也是PageProcessor控制Downloader唯一方式。</p>
<p>除了URL本身外，它还包含一个Key-Value结构的字段<code>extra</code>。你可以在extra中保存一些特殊的属性，然后在其他地方读取，以完成不同的功能。例如附加上一个页面的一些信息等。</p>
<blockquote>
<p>Page</p>
</blockquote>
<p><code>Page</code>代表了从Downloader下载到的一个页面——可能是HTML，也可能是JSON或者其他文本格式的内容。</p>
<p>Page是WebMagic抽取过程的核心对象，它提供一些方法可供抽取、结果保存等。</p>
<blockquote>
<p>ResultItems</p>
</blockquote>
<p><code>ResultItems</code>相当于一个Map，它保存PageProcessor处理的结果，供Pipeline使用。它的API与Map很类似，值得注意的是它有一个字段<code>skip</code>，若设置为true，则不应被Pipeline处理。</p>
<h3 id="控制爬虫运转的引擎–Spider"><a href="#控制爬虫运转的引擎–Spider" class="headerlink" title="控制爬虫运转的引擎–Spider"></a>控制爬虫运转的引擎–Spider</h3><p>Spider是WebMagic内部流程的核心。上述的四个组件，都是Spider的一个属性，这些属性是可以自由设置的，通过设置这个属性可以实现不同的功能。</p>
<p>Spider也是WebMagic操作的入口，它封装了爬虫的创建、启动、停止、多线程等功能。</p>
<blockquote>
<p>设置各个组件，并且设置多线程和启动的例子</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Spider</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GithubRepoPageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//从https://github.com/code4craft开始抓    </span>
            <span class="token punctuation">.</span><span class="token function">addUrl</span><span class="token punctuation">(</span><span class="token string">"https://github.com/code4craft"</span><span class="token punctuation">)</span>
            <span class="token comment">//设置Scheduler，使用Redis来管理URL队列</span>
            <span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisScheduler</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//设置Pipeline，将结果以json方式保存到文件</span>
            <span class="token punctuation">.</span><span class="token function">addPipeline</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonFilePipeline</span><span class="token punctuation">(</span><span class="token string">"D:\\data\\webmagic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//开启5个线程同时执行</span>
            <span class="token punctuation">.</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token comment">//启动爬虫</span>
            <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Selenium框架"><a href="#Selenium框架" class="headerlink" title="Selenium框架"></a>Selenium框架</h2><h3 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h3><p>Selenium是目前用的最广泛的Web UI自动化测试框架，祖传爬虫利器。</p>
<p>一些网页，比如微博，只有在登录状态才能进行页面的访问，或者对数据有比较复杂的验证和保护，直接通过网络请求进行登录并获取数据就会比较麻烦。这种时候，就该本篇的主角 selenium 上场了。</p>
<p>Selenium 是一个用于 Web 应用程序测试的工具。它的优点在于，浏览器能打开的页面，使用 selenium 就一定能获取到。但 selenium 也有其局限性，相对于脚本方式，selenium 获取内容的效率不高。</p>
<h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from selenium <span class="token function">import</span> webdriver

<span class="token comment"># 调用Chrome浏览器</span>
driver <span class="token operator">=</span> webdriver.Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 转到百度首页</span>
driver.get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 PhantomJS 时 : </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deriver <span class="token operator">=</span> webdriver.PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Selenium获取Cookies"><a href="#Selenium获取Cookies" class="headerlink" title="Selenium获取Cookies"></a>Selenium获取Cookies</h3><p>在反爬领域中，常常使用selenium获取cookies应付反爬虫</p>
<p>比如，爬取微博内容，需要登录状态，而保存的cookie会在一定时间后失效，这时候se lenium就可以使用预先设置好的账号密码登陆，然后获取cookies发送给脚本使用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取cookie 以百度为例</span>
cookie_r <span class="token operator">=</span> driver.get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<h2 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h2><h3 id="概览-2"><a href="#概览-2" class="headerlink" title="概览"></a>概览</h3><p>无头浏览器节省了GUI所必须消耗的大量内存，给多线程、进程并行提供了方便。而爬虫碰到需要运行js代码时，又必须借助运行js的工具：浏览器。</p>
<blockquote>
<p>常用的无头浏览器</p>
</blockquote>
<p>PhantomJS : 基于QtWebkit的无头浏览器，开发语言是JavaScript。</p>
<p>SlimerJS : 基于Gecko的无头浏览器，SlimerJS和PhantomJS基本兼容，就是一个内核换成了Gecko的PhantomJS。</p>
<p>HtmlUnit : 纯Java开发的无头浏览器，完全Java开发，Javascript引擎使用的是Rhnio，由于不是基于Webkit、Gecko等主流内核开发，兼容性不好。</p>
<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><strong>PhantomJS</strong></p>
<p>爽点：目前使用最广泛，最被认可的无头浏览器。由于采用的是Webkit内核，因此和Safari，Chrome等浏览器兼容性十分好。</p>
<p>痛点：和Java结合使用比较麻烦，主要还是调用phantomjs执行。</p>
<p>安装：<a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a></p>
<p><strong>HtmlUnit</strong></p>
<p>爽点：HtmlUnit是一款纯java开发的无头浏览器。</p>
<p>痛点：他既没有用weibkit内核，也没用gecko内核，其dom解析、css解析、javascript解析都是纯java开发的，因此其兼容性不太理想。目前HtmlUnit的最新版本的javascript引擎使用的是一款很老的叫做Rhnio的引擎，不管在效率和兼容性上都不理想。</p>
<blockquote>
<p>个人认为，使用业界最受认可的无头浏览器好一点。同时也不会为兼容性发愁。</p>
</blockquote>
<h3 id="PhantomJS入门"><a href="#PhantomJS入门" class="headerlink" title="PhantomJS入门"></a>PhantomJS入门</h3><p><strong>PhantomJS核心API</strong></p>
<ul>
<li>webpage : 它的作用主要是提供了一套可以访问和操作web文档的核心方法，包括操作DOM、事件捕获、用户事件模拟等等。</li>
<li>system : 该模块提供了一些与操作系统相关的接口，例如访问操作系统信息、访问系统环境变量、事件捕获、用户事件模拟等等。</li>
<li>fs : 即FIleSystem。提供了执行文件I/O操作的标准接口，如读写文件、删除文件等。它使得持久化一些文件变得非常容易。</li>
<li>webserver : 可以实现自己的webserver，用来处理请求并执行PhantomJS代码。</li>
</ul>
<p><strong>其他命令</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置信息执行PhantomJS命令格式如下</span>
phantomjs <span class="token punctuation">[</span>switches<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>script<span class="token punctuation">]</span> <span class="token punctuation">[</span>argument <span class="token punctuation">[</span>argument <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 打开debug模式</span>
phantomjs --debug<span class="token operator">=</span>yes demo.js

<span class="token comment"># 设置cookie路径</span>
phantomjs --cookie-file<span class="token operator">=</span>cookie.txt demo.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="爬虫案例"><a href="#爬虫案例" class="headerlink" title="爬虫案例"></a>爬虫案例</h2><p><a href="https://segmentfault.com/a/1190000008194764">抓取淘宝店铺及猫眼数据</a></p>
<p><a href="https://www.cnblogs.com/null-qige/p/7844381.html">抓取淘宝搜索页面</a></p>
<p><a href="https://blog.csdn.net/sd4000784/article/details/99618640">抓取房源信息内容网站</a></p>
]]></content>
      <categories>
        <category>工作学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫相关</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习笔记</title>
    <url>/2021/07/09/she-ji-mo-shi-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="设计模式学习笔记（持续更新）"><a href="#设计模式学习笔记（持续更新）" class="headerlink" title="设计模式学习笔记（持续更新）"></a>设计模式学习笔记（持续更新）</h1><hr>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="简单工厂结构"><a href="#简单工厂结构" class="headerlink" title="简单工厂结构"></a>简单工厂结构</h3><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.4ysb93bivsw0.png"></p>
<ul>
<li>Api : 定义客户所需要的功能接口。</li>
<li>Impl : 具体实现Api的实现类，可能会有多个</li>
<li>Factory : 工厂，选择合适的实现类来创建Api接口对象</li>
<li>Client : 客户端，通过Factory来获取Api接口对象，然后面向Api接口编程</li>
</ul>
<h3 id="简单工厂示例代码"><a href="#简单工厂示例代码" class="headerlink" title="简单工厂示例代码"></a>简单工厂示例代码</h3><blockquote>
<p>Api定义的示例代码</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 接口的定义，该接口可以通过简单工厂来创建
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 示意，具体功能方法的定义
   * @param s 示意，需要的参数
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>定义了接口，接下来实现它。ImplA的示例代码</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 接口的具体实现对象A
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplA</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现功能的代码，示意一下</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImplA s=="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>ImplB的示例代码</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 接口的具体实现对象B
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplB</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现功能的代码，示意一下</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImplB s=="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>简单工厂的实现</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 工厂类，用来创建Api对象
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 具体创建Api对象的方法
   * @param condition示意，从外部传入的选择条件
   * @return 创建好的Api对象
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Api</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token keyword">int</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 应该根据某些条件去选择究竟创建哪一个具体的实现对象</span>
    <span class="token comment">// 这些条件可以从外部传入，也可以从其他途径来获取</span>
    <span class="token comment">// 如果只有一个实现，可以省略条件</span>
    <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImplA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImplB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> api<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>客户端的示例代码</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 客户端，使用Api接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过简单工厂来获取接口对象</span>
    <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">createApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    api<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"正在使用简单工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>设计模式学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 105.从前序与中序遍历序列构造二叉树</title>
    <url>/2021/07/07/leetcode-105.cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-er-cha-shu/</url>
    <content><![CDATA[<h1 id="从前序与中序遍历序列构造二叉树"><a href="#从前序与中序遍历序列构造二叉树" class="headerlink" title="从前序与中序遍历序列构造二叉树"></a>从前序与中序遍历序列构造二叉树</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>
<p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p>
<p>例如，给出</p>
<pre class="line-numbers language-none"><code class="language-none">前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>返回如下的二叉树：</p>
<pre class="line-numbers language-none"><code class="language-none">  3
 / \
9  20
  /  \
 15   7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我觉得这题挺难的。。。</p>
</blockquote>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preorder_left<span class="token punctuation">,</span> <span class="token keyword">int</span> preorder_right<span class="token punctuation">,</span> <span class="token keyword">int</span> inorder_left<span class="token punctuation">,</span> <span class="token keyword">int</span> inorder_right<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>preorder_left <span class="token operator">&gt;</span> preorder_right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preorder_left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> inorder_index <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preorder_left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> leftSize <span class="token operator">=</span> inorder_index <span class="token operator">-</span> inorder_left<span class="token punctuation">;</span>

        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> preorder_left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder_left <span class="token operator">+</span> leftSize<span class="token punctuation">,</span> inorder_left<span class="token punctuation">,</span> inorder_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> preorder_left <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preorder_right<span class="token punctuation">,</span> inorder_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder_right<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> root<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 124.二叉树中的最大路径和</title>
    <url>/2021/07/08/leetcode-124.er-cha-shu-zhong-de-zui-da-lu-jing-he/</url>
    <content><![CDATA[<h1 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a>二叉树中的最大路径和</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p>
<p>路径和 是路径中各节点值的总和。</p>
<p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.38uhvrj92jg0.png"></p>
<pre class="line-numbers language-none"><code class="language-none">输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 = 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>示例 2：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.2rp84r44x6s0.png"></p>
<pre class="line-numbers language-none"><code class="language-none">输入：root = [-10,9,20,null,null,15,7]
输出：42
解释：最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 = 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围是 <code>[1, 3 * 104]</code></li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<blockquote>
<p>二叉树递归套路题</p>
</blockquote>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxDis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">solveMaxRe</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> leftValue <span class="token operator">=</span> <span class="token function">solveMaxRe</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rightValue <span class="token operator">=</span> <span class="token function">solveMaxRe</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftValue <span class="token operator">=</span> leftValue <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> leftValue<span class="token punctuation">;</span>
        rightValue <span class="token operator">=</span> rightValue <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> rightValue<span class="token punctuation">;</span>
        <span class="token keyword">int</span> curValue <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> leftValue <span class="token operator">+</span> rightValue<span class="token punctuation">;</span>

        maxDis <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDis<span class="token punctuation">,</span> curValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">,</span> rightValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">solveMaxRe</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> maxDis<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存结构</title>
    <url>/2021/07/09/jvm-nei-cun-jie-gou/</url>
    <content><![CDATA[<h1 id="JVM内存结构学习笔记"><a href="#JVM内存结构学习笔记" class="headerlink" title="JVM内存结构学习笔记"></a>JVM内存结构学习笔记</h1><hr>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>class文件会被类加载器装载到JVM中，并且JVM会负责程序<strong>运行时</strong>的<strong>内存管理</strong></p>
<p>而JVM的内存结构，往往指的就是JVM定义的<strong>运行时数据区</strong></p>
<hr>
<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>分为五大块：方法区、堆、程序计数器、虚拟机栈、本地方法栈。</p>
<p>这是JVM<strong>规范</strong>的分区概念，到具体的实际落地，不同的厂商实现可能是有所区别的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.7jauvc56vhw0.png"></p>
<hr>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>Java是多线程语言，假设线程数大于CPU数，就很有可能有<strong>线程切换</strong>的现象，切换意味着<strong>中断</strong>和<strong>恢复</strong>，所以需要一块区域来保存<strong>当前线程的执行信息</strong></p>
<p>所以程序计数器就是记录各个线程执行的字节码的地址（分支、循环、跳转、异常、线程恢复等都依赖于计数器）</p>
<hr>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>每个线程在创建的时候都会创建一个<strong>虚拟机栈</strong>，每次方法调用都会创建一个<strong>栈帧</strong>。每个<strong>栈帧</strong>会包含几块内容：局部变量表、操作数栈、动态连接和返回地址。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1cus2y3es0n4.png"></p>
<p>虚拟机栈的作用：它保存了方法的局部变量、部分变量的计算并参与了方法的调用和返回。</p>
<hr>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈跟虚拟机栈的功能类似，虚拟机栈用于管理Java函数的调用，而本地方法栈则用于管理本地方法的调用。这里的<strong>本地方法</strong>指的是<strong>非Java方法</strong>，一般本地方法是用C语言实现的。</p>
<hr>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>运行时数据区这个分区是JVM的规范，具体的落地实现，不同的虚拟机厂商可能是不一样的，所以方法区也只是JVM中规范的一部分而已。</p>
<p>在HotSpot虚拟机，就会常常提到<strong>永久代</strong>这个词。HotSpot虚拟机在JDK8前用<strong>永久代</strong>实现了方法区，而很多其他厂商的虚拟机其实是没有<strong>永久代</strong>的概念的。</p>
<p>在JDK8中，已经用<strong>元空间</strong>来替换了<strong>永久代</strong>作为<strong>方法区</strong>的实现了。</p>
<p>方法区主要是用来存放已被虚拟机加载的<strong>类相关信息</strong>：包括类信息、常量池。</p>
<p>类信息又包括了类的版本、字段、方法、接口和父类等信息。</p>
<p>常量池又分为<strong>静态常量池</strong>和<strong>运行时常量池</strong></p>
<p>静态常量池主要存储的是字面量以及符号引用等信息，静态常量池也包括了我们所说的<strong>字符串常量池</strong></p>
<p><strong>运行时常量池</strong>存储的是<strong>类加载</strong>时生成的<strong>直接引用</strong>等信息</p>
<p>从<strong>逻辑分区</strong>的角度而言，常量池属于方法区</p>
<p>但在JDK7以后，就已经把<strong>运行时常量池</strong>和<strong>静态常量池</strong>转移到了堆内存中进行存储。</p>
<p>所以对于物理分区来说，<strong>运行时常量池</strong>和<strong>静态常量池</strong>属于堆。</p>
<blockquote>
<p>JDK8把方法区的实现从永久代变成了元空间，有什么区别？</p>
</blockquote>
<p>最主要的区别就是：元空间存储不在虚拟机中，而是使用本地内存，JVM不会再出现方法区的内存溢出，以往永久代经常因为内存不够而导致OOM。</p>
<p>按JDK8版本，总结起来其实就相当于类信息是存储在元空间的。</p>
<p>而常量池用JDK7开始，从物理存储角度上就在堆中，这是没有变化的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6tcxcnpc0xc0.png"></p>
<hr>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是线程共享的区域，几乎类的实例和数组分配的内存都来自于它。</p>
<p>堆被划分为新生代和老年代，新生代又被进一步划分为Eden和Survivor区，最后Survivor由From和To组成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.xs8rfk598hc.png"></p>
<p>将堆内存分开了几块区域，主要是跟内存回收有关（垃圾回收机制）。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java内存模型是跟<strong>并发</strong>相关的，它是为了屏蔽底层细节而提出的规范，希望在上层（Java层面上）在操作内存时在不同的平台上也有相同的效果。</p>
<p><strong>JVM内存结构组成</strong>：JVM内存结构又称为「运行时数据区域」。主要有五部分组成：虚拟机栈、本地方法栈、程序计数器、方法区和堆。其中方法区和堆是线程共享的。虚拟机栈、本地方法栈以及程序计数器是线程隔离的。</p>
<hr>
<p>更详细学习推荐博客：<a href="https://pdai.tech/md/java/jvm/java-jvm-struct.html%EF%BC%88%E8%BF%99%E4%B8%AA%E5%9C%A8%E6%88%91%E7%9A%84%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E6%9C%89%EF%BC%89">https://pdai.tech/md/java/jvm/java-jvm-struct.html（这个在我的友情链接有）</a></p>
<p>更详细学习推荐书籍：《深入理解Java虚拟机》</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划学习-从暴力递归到动态规划</title>
    <url>/2021/07/10/dong-tai-gui-hua-xue-xi-1/</url>
    <content><![CDATA[<h1 id="动态规划学习-从暴力递归到动态规划-持续更新"><a href="#动态规划学习-从暴力递归到动态规划-持续更新" class="headerlink" title="动态规划学习-从暴力递归到动态规划(持续更新)"></a>动态规划学习-从暴力递归到动态规划(持续更新)</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我依旧记忆犹新的一件事，也是我大学生涯的一大遗憾。</p>
<p>第十四届吉林省大学生程序设计竞赛，我们队作为参赛队伍，在比赛前期零罚时且过题速度极快，冲到了榜单第三的位置，记得第一是吉大一队，第二是东师的队伍。</p>
<p>当时心里想的是“省一稳了”，但是却没想到，最后被一道题硬生生卡死，错失省一。即使是到最后一个小时的时候，我们把这题过了，也能冲到省一末的名次（主要是我们队的罚时是真的短），但是直到最后，绞尽脑汁，也无法通过那道题。</p>
<p>而那道题，就是一道动态规划。</p>
<p>动态规划题目一直以来，都是我的噩梦。像是KMP，最短路，最小生成树，并查集，线段树这些算法，只要理解算法思想，一般就是套模版去应用就可以了。但是动态规划，我一直没能理解思想，因为动态规划太“动态”了，每个题目都有不同的状态转移方程。</p>
<p>但是逃避不是解决问题的方式。</p>
<p>所以我打算从头到尾，把动态规划的常见套路和常见习题，全过一遍，掌握动态规划的核心思想，从头到尾，记录博客学习。</p>
<hr>
<h2 id="经典换钱问题"><a href="#经典换钱问题" class="headerlink" title="经典换钱问题"></a>经典换钱问题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定数组arr，arr中所有的值都为正数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张，再给定一个整数aim代表要找的钱数，求换钱有多少种方法。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>arr = [5, 10, 25, 1]，aim = 0</p>
<p>组成0元的方法有一种，就是所有面值的货币都不用，所以返回1。</p>
<p>arr = [5, 10, 25, 1]，aim = 15</p>
<p>组成15元的方法有6种，1张10元+1张5元、1张10元+5张1元。。。。。。</p>
<p>arr = [3, 5]，aim = 2</p>
<p>任何方法都无法组成2元，返回0</p>
<h3 id="思路及代码"><a href="#思路及代码" class="headerlink" title="思路及代码"></a>思路及代码</h3><blockquote>
<p>一切动态规划都来源于递归，所以我们可以先写一个递归版本，也就是尝试版本，尝试各种方法去凑钱。</p>
</blockquote>
<p><strong>递归过程</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * index : 可以任意自由使用index及其之后所有的钱
 * aim : 目标钱数
 * 返回值 : 方法数
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	res <span class="token operator">=</span> aim <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token keyword">for</span>	<span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	res <span class="token operator">+=</span> <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> aim <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coins1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>👆上面这坨代码，这玩意巨暴力无比，绝对是不能用的，有相当多的重复的递归过程。</p>
<p>好，接下来写第一个优化版本。先分析一下，哪些值固定，我们的返回值就固定。</p>
<p>从上面的代码我们可以发现，index 和 aim 一旦固定，返回值结果就会固定。</p>
<p>这样，我们就可以把计算过的index和aim相同的组合情况存储下来，下次再次出现相同的index和aim的组合时，我们直接去取计算过的内容，就好了。这样就避免了重复计算，这就是记忆化搜索！</p>
<blockquote>
<p>记忆化搜索代码</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * key : index + "_" + aim
 * value : 返回值
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	res <span class="token operator">=</span> aim <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token keyword">for</span>	<span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token keyword">int</span> nextAim <span class="token operator">=</span> aim <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
          	<span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nextAim<span class="token punctuation">)</span><span class="token punctuation">;</span>
          	<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token comment">// 如果之前算过，就不进行递归了，直接把结果拿出来，避免大量的重复计算过程</span>
              	res <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              	res <span class="token operator">+=</span> <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nextAim<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>aim<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了👆上面这段代码，就可以让复杂度极具的下降。但是还不够啊，还能再优化，</p>
<p>接下来推动态规划。</p>
<p>我们由上面知道，index和aim确定，返回值就确定，那么我们的所有答案一定能由一个二维表装下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1fy554e4gg2o.png"></p>
<p>接下来分析这题的目标是什么</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coins1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">// 返回的就是目标</span>
  	<span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以我们这题的目标就是index为0，aim为传入的aim这个状态。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5nuxjzzbb2s0.png"></p>
<p>然后看这个二维表的哪些位置是可以直接确定的。看递归中的base case，也就是下面的代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> aim <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>从这里可以看出，当index为arr.length的时候我们的值是可以确定的。</p>
<p>然后在index为arr.length的基础上，aim值为0的时候返回1否则是0。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6u94gwyy2lo0.png" alt="image"></p>
<p>接下来，看位置依赖。</p>
<p>看一下，是怎么调递归的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span>	<span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res <span class="token operator">+=</span> <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> aim <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>从这段代码可以看出来，在当前index和aim位置的返回值，index依赖于index + 1，也就是二维表中下一行的值。那依赖于下一行的哪些值呢？就是减去1张当前值的aim，减去2张当前值的aim，减去3张当前值的aim。。。。。直到越界，最后把这一行的值相加即可得到当前位置的值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image-20210710153234631.5gwfttcrcyc0.png" alt="image-20210710153234631"></p>
<p>图中i,aim是我们的当前位置，下面的?就是我们依赖的位置，将?的值相加就能得到我们当前位置的值。</p>
<p>又因为我们有了最后一行，我们每个点只依赖于该点所在位置的下一行。这样我们就可以补齐整张表。</p>
<p>拿[5, 3, 2]，aim = 10这个例子举例，下面就是它的二维矩阵。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.28clclu7wqm8.png"></p>
<p>接下来就是最后一步优化，在这个二维数组的基础上进行优化。</p>
<p>上面说了，i,aim 这个点的位置，是需要它的下一行多个值进行累加的结果。但是当你计算到 i,aim 这个点的时候，i,aim-arr[i] 这个点你已经计算过了。如下图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1a8qw0oqmpcw.png"></p>
<p>当你求当前点时，?位置已经求解过了。那我当前点的值岂不是直接就是当前点下面的那个点的值加上?位置的值。</p>
<p>又省略了大量的重复过程！！！</p>
<p>而这，就是动态规划。得说不说，是真的🐂。</p>
<p>下面上代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coinDp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> j <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
          	dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> j <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  	<span class="token keyword">return</span> dp<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实这题在空间上还是可以优化的，用滚动数组，但是目前我的重心是学习动态规划，空间优化的代码先不写了，以后有时间补。</p>
<hr>
<h2 id="动态规划学习资源推荐"><a href="#动态规划学习资源推荐" class="headerlink" title="动态规划学习资源推荐"></a>动态规划学习资源推荐</h2><p>课程：左神的课（左神yyds）</p>
<p>练习：Leetcode，codeforce，各大OJ。</p>
]]></content>
      <categories>
        <category>动态规划学习笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 139.单词拆分</title>
    <url>/2021/07/11/leetcode-139.dan-ci-chai-fen/</url>
    <content><![CDATA[<h1 id="单词拆分"><a href="#单词拆分" class="headerlink" title="单词拆分"></a>单词拆分</h1><hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>
<p><strong>说明：</strong></p>
<ul>
<li>拆分时可以重复使用字典中的单词。</li>
<li>你可以假设字典中没有重复的单词。</li>
</ul>
<p><strong>示例 1：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入: s <span class="token operator">=</span> <span class="token string">"leetcode"</span>, wordDict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"leet"</span>, <span class="token string">"code"</span><span class="token punctuation">]</span>
输出: <span class="token boolean">true</span>
解释: 返回 <span class="token boolean">true</span> 因为 <span class="token string">"leetcode"</span> 可以被拆分成 <span class="token string">"leet code"</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>示例 2：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"applepenapple"</span><span class="token punctuation">,</span> wordDict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"pen"</span><span class="token punctuation">]</span>
输出<span class="token operator">:</span> <span class="token boolean">true</span>
解释<span class="token operator">:</span> 返回 <span class="token boolean">true</span> 因为 <span class="token string">"applepenapple"</span> 可以被拆分成 <span class="token string">"apple pen apple"</span>。
     注意你可以重复使用字典中的单词。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>示例 3：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"catsandog"</span><span class="token punctuation">,</span> wordDict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cats"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"sand"</span><span class="token punctuation">,</span> <span class="token string">"and"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">]</span>
输出<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>刚开始觉得这题可以用前缀树，但是实现起来有点复杂。</p>
</blockquote>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordDict<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wordDict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>LeetCode训练录</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>手写RPC框架</title>
    <url>/2021/07/12/shou-xie-rpc-kuang-jia/</url>
    <content><![CDATA[<h1 id="手写-RPC-框架"><a href="#手写-RPC-框架" class="headerlink" title="手写 RPC 框架"></a>手写 RPC 框架</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看了Guide哥的手写RPC框架文章，感觉非常不错，对我帮助很大。</p>
<p>记录编写RPC框架的学习过程与编码过程，不断提高。</p>
<hr>
<h2 id="什么是-RPC-框架？"><a href="#什么是-RPC-框架？" class="headerlink" title="什么是 RPC 框架？"></a>什么是 RPC 框架？</h2><h3 id="什么是-RPC-？"><a href="#什么是-RPC-？" class="headerlink" title="什么是 RPC ？"></a>什么是 RPC ？</h3><p>RPC（Remote Procedure Call）即远程过程调用，RPC关注的是远程调用，而非本地调用。</p>
<p><strong>为什么要 RPC ?</strong> 因为两个不同的服务器上的服务提供的方法不在一个内存空间，所以，需要通过网络编程才能传递方法调用所需要的参数。并且，方法调用的结果也需要通过网络编程来接收。但是，如果我们自己手动网络编程来实现这个调用过程的话工作量是非常巨大的。因为，我们需要考虑底层传输方式（ TCP 还是 UDP ）、序列化方式等等方面。</p>
<p><strong>RPC 能帮助我们做什么呢？</strong> 通过 RPC 可以帮助我们调用远程计算机上某个服务的方法，这个过程就像调用本地方法一样简单。并且，我们不需要了解底层网络编程的具体细节。</p>
<blockquote>
<p>RPC 的出现就是为了让调用远程方法像调用本地方法一样简单</p>
</blockquote>
<h3 id="RPC-原理是什么？"><a href="#RPC-原理是什么？" class="headerlink" title="RPC 原理是什么？"></a>RPC 原理是什么？</h3><p>RPC的核心功能是下面👇 6 个部分实现的：</p>
<ul>
<li>客户端（服务消费端）：调用远程方法的一端。</li>
<li>客户端 Stub（桩）：代理类，把调用方法类、方法参数等信息传递到服务器。</li>
<li>网络传输：网络传输就是把调用的方法的信息，比如参数这些东西传输到服务端，然后服务端执行完之后再把返回结果通过网络传输给你传输回来。网络传输的实现方式有很多，比如最基本的 Socket 或者性能以及封装更加优秀的 Netty（大部分选择） 。</li>
<li>服务端 Stub（桩）：这个桩不是代理类。指的是接收到客户端执行方法的请求后，去指定对应的方法然后返回结果给客户端的类。</li>
<li>服务端（服务提供端）：提供远程方法的一端。</li>
</ul>
<p><strong>具体原理图：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.20g15lg6wge8.png"></p>
<ol>
<li>服务消费端（client）以本地调用的方式调用远程服务</li>
<li>客户端 Stub （client stub）接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体（序列化）：RpcRequest</li>
<li>客户端 Stub （client stub）找到远程服务的地址，并将消息发送到服务提供端</li>
<li>服务端 Stub（桩）收到消息将消息反序列化为 Java 对象：RpcRequest</li>
<li>服务端 Stub（桩）根据 RpcRequest 中的类、方法、方法参数等信息调用本地的方法</li>
<li>服务端 Stub（桩）得到方法执行结果并将其组装成能够进行网络传输的消息体：RpcResponse（序列化）发送至消费方</li>
<li>客户端 Stub （client stub）接收到消息并将消息反序列化为Java对象：RpcResponse，这样就得到了最终结果。</li>
</ol>
<hr>
<h2 id="常见RPC框架"><a href="#常见RPC框架" class="headerlink" title="常见RPC框架"></a>常见RPC框架</h2><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>Apache Dubbo 是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力</p>
<ul>
<li>面向接口的远程方法调用</li>
<li>智能容错和负载均衡</li>
<li>服务自动注册和发现</li>
</ul>
<p>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。</p>
<p>由阿里开源，后来加入了 Apache。</p>
<h3 id="Motan"><a href="#Motan" class="headerlink" title="Motan"></a>Motan</h3><p>2016年新浪微博开源的一套 RPC 框架，据说在新浪微博正支撑着千亿次调用。但是很少看到有公司使用。</p>
<p>Motan 更像是一个精简版的 dubbo，可能是借鉴了 Dubbo 的思想，motan 的设计更加精简，功能更加纯粹。</p>
<p>但是实际使用的话，还是推荐 Dubbo，其社区活跃度以及生态都要好很多。</p>
<h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><p>Google 开源的一个高性能、通用的开源 RPC 框架。主要面向移动应用开发并基于 HTTP/2 协议标准而设计，基于 ProtoBuf 序列化协议开发，并且支持众多开发语言。</p>
<p>通过 ProtoBuf 定义接口和数据类型比较繁琐。</p>
<h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><p>Apache Thrift 是 Facebook 开源的跨语言的 RPC 通信框架，目前已经捐献给 Apache 基金会管理，由于其跨语言特性和出色的性能，在很多互联网公司应用，有能力的公司甚至会基于 thrift 研发一套分布式服务框架，增加诸如服务注册、服务发现等功能。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>gRPC 和 Thrift 虽然支持跨语言的 RPC 调用，但是因为它们只提供了最基本的 RPC 框架功能，缺乏一系列配套的服务化组件和服务治理功能的支撑。</p>
<p>Dubbo 不论是从功能完善程度、生态系统还是社区活跃度来说都是最优秀的。最重要的是在国内有很多成功案例如当当网、滴滴等。</p>
<p>另外，Dubbo 也是 Spring Cloud Alibaba 里面的一个组件。</p>
<p>综上，如果是 Java 后端技术栈，Dubbo是不错的选择。</p>
<hr>
<h2 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h2><p>一般情况下，RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正的合格。</p>
<hr>
<h2 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>心动不如行动，先写一个简易版的RPC框架。熟悉一下 RPC 的基本通信过程。</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>1.首先创建一个 User 对象，这是客户端和服务端都已知的，客户端需要得到这个对象，而服务端需要操作这个对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> sex<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.定义一个通用的 Request 的对象（消息格式）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 客户端请求消息格式
 * 服务端根据客户端发送的信息，反射调用相应的方法
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 服务类名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> interfaceName<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 方法名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 参数列表
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 参数类型
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramsType<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.定义一个通用的 Response 的对象（消息格式）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Rpc响应对象
 * Rpc需要经过网络传输，有可能失败，类似于http，引入状态码和状态信息表示服务调用成功还是失败
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCResponse</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 状态信息
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 具体数据
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RPCResponse</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">RPCResponse</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RPCResponse</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">RPCResponse</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"服务器发生错误"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.定义客户端需要调用，服务端需要提供的服务接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token class-name">User</span> <span class="token function">getUserByUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Integer</span> <span class="token function">insertUserId</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.服务端需要实现 Service 接口的功能</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端查询了"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"的用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟从数据库中取用户的行为</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">insertUserId</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入数据成功: "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.服务端接受解析 request 与封装发送 response 对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * TODO: 这个类负责的功能太复杂，以后代码重构中，这个类要抽取出来
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">UserServiceImpl</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8899</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// BIO方式监听Socket</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 开启一个线程去处理</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>

                        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 读取客户端穿过来的request</span>
                        <span class="token class-name">RPCRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RPCRequest</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 反射调用对应方法</span>
                        <span class="token class-name">Method</span> method <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParamsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 封装写入response对象</span>
                        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">RPCResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>invoke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从IO中读取数据错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.底层的通信</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOClient</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 负责底层与服务端的通信
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RPCResponse</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">RPCRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">RPCResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RPCResponse</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> response<span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>8.客户端根据不同的 Service 进行动态代理，动态代理封装 request 对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">/**
     * 传入参数service接口的class对象，反射封装成一个request
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token comment">/**
     * jdk动态代理，每一次代理对象调用方法，会经过此方法增强（反射获取request对象，socket发送）
     * proxy:代理类代理的真实代理对象
     * method:我们所要调用某个对象真实的方法的Method对象
     * args:指代代理对象方法传递的参数
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

        <span class="token comment">// RPCRequest的构建</span>
        <span class="token class-name">RPCRequest</span> request <span class="token operator">=</span> <span class="token class-name">RPCRequest</span>
                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">interfaceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paramsType</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 数据传输</span>
        <span class="token class-name">RPCResponse</span> response <span class="token operator">=</span> <span class="token class-name">IOClient</span><span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token class-name">T</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/**
         * loader：一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载
         * interfaces：一个interface对象数组，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。
         * h：一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。
         */</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>clazz<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9.客户端调用不同的方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPCClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClientProxy</span> clientProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientProxy</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8899</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> clientProxy<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务的方法1</span>
        <span class="token class-name">User</span> userByUserId <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">getUserByUserId</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从服务端得到的user为："</span> <span class="token operator">+</span> userByUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务的方法2</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">"海瑞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">insertUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向服务端插入数据："</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>结果</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.7k217izrv6c0.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1vqo9ij6heg0.png"></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>存在痛点分析</strong></p>
<ul>
<li>服务端直接绑定的是 UserService 服务，如果还有其他服务接口呢？（多个服务的注册问题）</li>
<li>服务端以 BIO 的方式性能太低（性能问题）</li>
<li>服务端功能太复杂：监听，处理。需要松耦合（耦合度问题）</li>
</ul>
<p><strong>下版优化目标</strong></p>
<ul>
<li>代码解耦</li>
<li>运用线程池</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>RPC框架</category>
      </categories>
      <tags>
        <tag>RPC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM垃圾回收机制</title>
    <url>/2021/07/19/jvm-la-ji-hui-shou-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="JVM垃圾回收机制学习笔记"><a href="#JVM垃圾回收机制学习笔记" class="headerlink" title="JVM垃圾回收机制学习笔记"></a>JVM垃圾回收机制学习笔记</h1><hr>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.sk9x704i7m8.png"></p>
<h2 id="JVM垃圾回收机制"><a href="#JVM垃圾回收机制" class="headerlink" title="JVM垃圾回收机制"></a>JVM垃圾回收机制</h2><p>当使用 Java 的时候，会创建很多对象，但我们未曾<strong>手动</strong>将这些对象进行清除。</p>
<p>而如果用 C / C++ 语言的时候，用完是需要自己 free 掉的</p>
<p>那为什么在写 Java 的时候，不用手动释放“垃圾”呢？就是因为JVM帮我们做了。</p>
<p>只要对象不再被使用了，我们就认为该对象就是垃圾，对象所占用的空间就可以回收了。</p>
<hr>
<h2 id="如何判断对象不再被使用"><a href="#如何判断对象不再被使用" class="headerlink" title="如何判断对象不再被使用"></a>如何判断对象不再被使用</h2><p>常用的算法有两个 <strong>引用计数法</strong> 和 <strong>可达性分析</strong></p>
<p>引用计数法思路很简单：当对象被引用则 +1 ，但对象引用失败则 -1 。当计数器为0时，说明对象不再被引用，可以被回收。</p>
<p>引用计数法的缺点是：如果对象存在循环依赖，那就无法定位该对象是否应该被回收</p>
<p>另一种就是可达性分析：它从 <strong>GC Roots</strong> 开始向下搜索，当对象到 <strong>GC Roots</strong> 都没有任何引用相连时，说明对象是不可用的，可以被回收。</p>
<p><strong>GC Roots</strong> 是一组必须活跃的引用</p>
<p>从 GC Root 出发，程序通过直接引用或者间接引用，能够找到可能正在被使用的对象。</p>
<p>JVM用的就是<strong>可达性分析算法</strong>来判断对象是否为垃圾。</p>
<hr>
<h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><p>垃圾回收第一步是<strong>标记</strong>，标记哪些没有被 <strong>GC Roots</strong> 引用的对象。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.3413npm503s0.png"></p>
<p>标记完之后，我们就可以选择直接<strong>清除</strong>，只要不被 <strong>GC Roots</strong> 关联的，都可以干掉。</p>
<p>过程非常简单粗暴，但也存在明显的问题。</p>
<p>直接清除会有<strong>内存碎片</strong>的问题：可能我有 10M 的空余内存，但程序申请 9M 内存空间却申请不下来（有内存碎片，内存空间不连续）</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.3787f1h69um0.png"></p>
<p>那解决内存碎片的问题也比较简单粗暴，标记完，不直接清除。</p>
<p>我把标记存活的对象复制到另一块空间，复制完了之后，直接把原有的整块空间给干掉！这样就没有内存碎片问题了。</p>
<p>这种做法缺点又很明显：内存利用率低，得有一块新的区域给我复制过去。</p>
<p>还有一种折中的做法，把存活的对象移到一边，把垃圾移到一边，那再将垃圾一起删除掉，不就没有内存碎片了嘛。</p>
<p>这种专业的术语叫做整理。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.3ucvw6zlsq8.png"></p>
<p>这就是 <strong>标记清除 标记整理 复制</strong> 算法的概念。</p>
<hr>
<h2 id="堆（新生代，老年代）"><a href="#堆（新生代，老年代）" class="headerlink" title="堆（新生代，老年代）"></a>堆（新生代，老年代）</h2><p>经研究表明：大部分对象的生命周期都很短，而只有少部分对象可能会存活很长时间。</p>
<p>又由于<strong>垃圾回收</strong>是会导致 <strong>stop the world</strong> （应用停止访问）</p>
<p>回收垃圾的时候，程序是又是有短暂的时间不能正常继续运作的，不然JVM在回收的时候，用户线程还继续分配引用，JVM怎么搞。</p>
<p>为了使 <strong>stop the world</strong> 持续的时间尽可能短以及提高并发式 GC 所能应付的内存分配速率。</p>
<p>在很多垃圾回收器上都会在 <strong>物理</strong> 或者 <strong>逻辑</strong> 上，把这两类对象进行区分。</p>
<p>死的快的对象所占的区域叫做 <strong>年轻代</strong>，活的久的对象所占的区域叫做 <strong>老年代</strong>。</p>
<p>但不是所有的 <strong>垃圾回收器</strong> 都会有，比如高版本所使用的垃圾收集器的ZGC是没有分代的概念的。</p>
<hr>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>说一下 JDK8 生产环境及其他常见的垃圾回收器有：</p>
<p><strong>年轻代</strong>：Serial、Parallel Scavenge、ParNew</p>
<p><strong>老年代</strong>：Serial Old、Parallel Old、CMS</p>
<p>Serial是单线程，Parallel是多线程</p>
<p>这些垃圾回收器实际上就是实现了垃圾回收算法</p>
<p>CMS 在 <strong>JDK8之前</strong> 是比较新的垃圾回收器，它的特点是能够尽可能减少 <strong>stop the world</strong> 时间。在垃圾回收时让用户线程和GC线程能够并发执行。</p>
<p>又可以发现，<strong>年轻代</strong> 的垃圾收集器使用的都是 <strong>复制算法</strong></p>
<p>所以在 <strong>堆内存</strong> 划分中，将年轻代划分出Survivor区，目的就是为了有一块完整的内存空间供垃圾回收器进行拷贝。</p>
<p>而新的对象则放入 Eden 区</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5how8xd3o0g0.png"></p>
<p>那么什么时候对象会进到老年代呢？</p>
<p>我认为有两种情况：</p>
<ul>
<li>如果对象太大了，就直接进入老年代</li>
<li>如果对象太老了，就会晋升至老年代（默认15）</li>
</ul>
<p>Monor GC 什么时候会触发呢？</p>
<p>Monor GC 其实就是年轻代GC。那在 <strong>年轻代</strong> GC的时候，从 GC Roots 出发，那不也会扫描到 <strong>老年代</strong> 的对象吗？那不就相当于全堆扫描吗？</p>
<p>这样分代还有意义吗？</p>
<p>这里 JVM 里也有解决办法的。HotSpot 虚拟机 <strong>老的GC</strong> （G1以下）是要求整个GC堆在连续的地址空间上。</p>
<p>所以会有一条分界线（一侧是老年代，另一侧是年轻代），所以可以通过 <strong>地址</strong> 就可以判断对象在哪个分代上。</p>
<p>做 Monor GC 的时候，从 GC Roots 出发，如果发现 <strong>老年代</strong> 的对象，那就不往下走了（Monor GC 对老年代的区域毫无兴趣）</p>
<p>但又有个问题，如果 <strong>年轻代</strong> 的对象被 <strong>老年代</strong> 引用了呢？（老年代对象持有年轻代对象的引用），那时候肯定是不能回收掉 <strong>年轻代</strong> 的对象的。</p>
<p>HotSpot 虚拟机下 有 <strong>card table</strong>（卡表）来避免全局扫描 <strong>老年代</strong> 对象。</p>
<p><strong>堆内存</strong> 的每一小块区域形成 <strong>卡表</strong>，卡表实际上就是卡页的集合。当判断一个卡页中有存在对象的跨代引用时，将这个页标记为 <strong>脏页</strong>。</p>
<p>那知道了 <strong>卡表</strong> 之后，就很好办了。每次 Monor GC 的时候只需要去 <strong>卡表</strong> 找到 <strong>脏页</strong>，找到后加入至 GC Root，而不用去遍历整个 <strong>老年代</strong> 的对象了。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>什么是垃圾</strong>：只要对象不再被使用，那即是垃圾</p>
<p><strong>如何判断为垃圾</strong>：可达性分析算法和引用计算算法，JVM使用的是可达性分析算法</p>
<p><strong>什么是GC Roots</strong>：GC Roots是一组必须活跃的引用，跟GC Roots无关联的引用即是垃圾，可被回收</p>
<p><strong>常见的垃圾回收算法</strong>：标记清除、标记复制、标记整理</p>
<p><strong>为什么需要分代</strong>：大部分对象都死得早，只有少部分对象会存活很长时间。在堆内存上都会在物理或逻辑上进行分代，为了使「stop the word」持续的时间尽可能短以及提高并发式GC所能应付的内存分配速率。</p>
<p><strong>Minor GC</strong>：当Eden区满了则触发，从GC Roots往下遍历，年轻代GC不关心老年代对象</p>
<p><strong>什么是card table</strong>【卡表】：空间换时间（类似bitmap），能够避免扫描老年代的所有对应进而顺利进行Minor GC （案例：老年代对象持有年轻代对象引用）</p>
<p><strong>堆内存占比</strong>：年轻代占堆内存1/3，老年代占堆内存2/3。Eden区占年轻代8/10，Survivor区占年轻代2/10（其中From 和To 各站1/10)</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段性总结20210721</title>
    <url>/2021/07/21/jie-duan-xing-zong-jie-20210721/</url>
    <content><![CDATA[<h1 id="阶段性总结-2021-7-21"><a href="#阶段性总结-2021-7-21" class="headerlink" title="阶段性总结-2021.7.21"></a>阶段性总结-2021.7.21</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从离开校园到现在，大概有三周的时间了。这段时间有很多收获，也有很多自己做的蠢事。</p>
<p>这段时间，我一天的生活基本分为两个阶段</p>
<ul>
<li>实习</li>
<li>自学</li>
</ul>
<p>我需要总结一下 <strong>实习</strong> 和 <strong>自学</strong> 过程中，自己走过的坑和自己需要改进的点。</p>
<p>终生学习，不断进步。</p>
<h2 id="水滴实习"><a href="#水滴实习" class="headerlink" title="水滴实习"></a>水滴实习</h2><p>从校园学子到职场新人，适应职场是我面临的第一个挑战。</p>
<p>目前看来，我最应该做的还是尽快<strong>提高自己的水平</strong>以应对各种需求，尽快<strong>熟悉公司各种平台</strong>。</p>
<p>部门大佬有很多，我是最菜的那一个。见识到了差距，所以对知识的渴望也更加强烈。</p>
<p>因为我大二在搞虚幻四游戏引擎方向，到了大三才进军的 Java，所以在基础方面还有太多需要查缺补漏的地方。</p>
<p>总得来说，我们部门的氛围还是很舒服的。大家都很努力，之前看过脉脉上的评价，都说水滴太“卷”了。其实还好，我觉得水滴作息安排的很好，午休2小时，晚餐1小时，也没感觉太过劳累。</p>
<p>慢慢适应公司项目和平台，是我目前应该去做的事。</p>
<h2 id="自学"><a href="#自学" class="headerlink" title="自学"></a>自学</h2><p>在自学这一块，我可谓是做的一塌糊涂。</p>
<p>尼玛，是我没认真自学吗？错！</p>
<p>我每天下班到家，就算再累，都会保持两小时学习时间。</p>
<p>但是学的太分散了，我现在再想一下我的自学历程，我都觉得离谱。</p>
<p><strong>给大家分享一下我最近的自学历程（看个笑话）：</strong></p>
<p>听了 leader 的建议，买了《maven实战》实体书，存了《鸟哥私房菜》的电子书。</p>
<p>因为自己的网络欠缺，翻出了以前读了一部分的《计算机网络自顶向下》。</p>
<p>因为朋友和技术博主推荐，买了《深入理解 Java 虚拟机》。</p>
<p>因为自己对优秀的代码设计的向往，存了《研磨设计模式》电子书。</p>
<p>光电子书，我就搜罗了一大堆。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.4ntypnsqfl60.png"></p>
<p><strong>你以为只是看书？</strong></p>
<p>我每天回家最起码要刷 1 - 2 道leetcode。（保持编码手感，锻炼逻辑思维，防止老年痴呆）</p>
<p>学习 b 站视频《操作系统（哈工大李治军老师）32讲》</p>
<p>学习慕课网视频《Redis 从入门到高可用分布式实践》</p>
<p>学习Guide哥的文章《从零开始实现一个 RPC 框架》</p>
<p>学习左神的视频</p>
<p>。。。。。。。。</p>
<p><strong>结果呢？</strong></p>
<p>《Maven实战》看了前5章，像《鸟哥私房菜》《计算机网络自顶向下》《研磨设计模式》就看了一章。《操作系统（哈工大李治军老师）32讲》看了一集，《Redis 从入门到高可用分布式实践》看了一章，左神的视频看了两集。</p>
<p>相信大家从我的博客上就能看出来，我最近开了好多文章，但是都只写了一点。</p>
<p><strong>这种学习方式，简直是一个人开多核 CPU 也学不完。</strong></p>
<p>学习方法出了问题啊，我现在更应该循序渐进，把一个东西看完研究透再去看下一个。</p>
<hr>
<h2 id="下阶段计划"><a href="#下阶段计划" class="headerlink" title="下阶段计划"></a>下阶段计划</h2><p>自学方法出了问题，自然要改正，并给自己制定计划。</p>
<p><strong>书籍方面</strong></p>
<p>我决定参加这次 Guide 哥的读书活动，学一些并发编程的知识，我们 leader 也说过，凡是涉及到 <strong>写</strong> 的问题，都要考虑并发。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1x1ewx5bd6y.png"></p>
<p>其他书籍先放一放，一本一本的看。</p>
<p><strong>视频方面</strong></p>
<p>视频方面我打算跟两个。</p>
<p>一个是《操作系统（哈工大李治军老师）32讲》，操作系统是每个程序员的基本功，我得深入系统的学习一下。</p>
<p>还有一个是《Redis 从入门到高可用分布式实践》，不会吧不会吧，不会还有人不学 Redis 吧。</p>
<p><strong>每天应保持</strong></p>
<ul>
<li>1 - 2道 leetcode</li>
<li>视频跟看 1 集，并做相应笔记</li>
<li>读书 30 分钟（一般睡前读，读的犯困了直接睡）</li>
</ul>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我一直希望自己以后可以成为一名优秀的程序员，希望自己在 35 岁不被淘汰。</p>
<p>所以才要 <strong>终生学习，不断总结</strong> 。</p>
<p>这是我的第一个阶段性总结，但不会是最后一个。</p>
]]></content>
      <categories>
        <category>阶段性总结</category>
      </categories>
      <tags>
        <tag>阶段性总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/2021/07/10/redis-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="Redis学习-持续更新"><a href="#Redis学习-持续更新" class="headerlink" title="Redis学习(持续更新)"></a>Redis学习(持续更新)</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写的Redis学习笔记的博客，个人认为写的不是很好，不够系统。故打算从头重学Redis，整理学习笔记。</p>
<p>学习参考课程：《一站式学习Redis从入门到高可用分布式实践》</p>
<hr>
<h2 id="Redis初识"><a href="#Redis初识" class="headerlink" title="Redis初识"></a>Redis初识</h2><h3 id="Redis是什么"><a href="#Redis是什么" class="headerlink" title="Redis是什么"></a>Redis是什么</h3><ul>
<li><p>开源：可以看Redis的源码，去学习，企业可以做一些定制化。</p>
</li>
<li><p>基于键值的存储服务系统</p>
</li>
<li><p>多种数据结构</p>
</li>
<li><p>高性能、功能丰富</p>
</li>
</ul>
<h3 id="谁在使用Redis"><a href="#谁在使用Redis" class="headerlink" title="谁在使用Redis"></a>谁在使用Redis</h3><ul>
<li>Github</li>
<li>Twitter</li>
<li>stackoverflow</li>
<li>阿里巴巴</li>
<li>百度</li>
<li>新浪</li>
<li>美团</li>
<li>搜狐</li>
</ul>
<blockquote>
<p>只要是正常互联网企业，都在应用Redis。不会吧，不会吧，不会还有公司没用Redis吧。</p>
</blockquote>
<h3 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h3><ul>
<li>速度快</li>
<li>持久化</li>
<li>多种数据结构</li>
<li>支持多种编程语言</li>
<li>功能丰富</li>
<li>简单</li>
<li>主从复制</li>
<li>高可用、分布式</li>
</ul>
<h4 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h4><p>每秒10W次读写</p>
<p><strong>为什么这么快呢？</strong></p>
<p>Redis是将数据存到内存当中的，内存读取肯定比磁盘快。（主要原因）</p>
<p>而且Redis是基于C语言实现的，合理使用C语言，效率极高。</p>
<p>Redis早期版本使用单线程，避免切换上下文耗费时间。</p>
<p>Redis6.0版本后，使用多线程，主要是为了处理网络I/O的瓶颈。</p>
<h4 id="持久化（断电不丢数据）"><a href="#持久化（断电不丢数据）" class="headerlink" title="持久化（断电不丢数据）"></a>持久化（断电不丢数据）</h4><p>Redis所有的数据保存在内存中，对数据的更新将异步的保存到磁盘上。</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>提供5种主要的数据结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.4jlcf5nk1bc0.png"></p>
<p>除了5种主要的数据结构，还有一些其他的数据结构，如BitMaps（位图），HyperLogLog（超小内存唯一值计数），GEO（地理信息定位）。</p>
<h4 id="支持多种客户端语言"><a href="#支持多种客户端语言" class="headerlink" title="支持多种客户端语言"></a>支持多种客户端语言</h4><ul>
<li>Java</li>
<li>php</li>
<li>python</li>
<li>Ruby</li>
<li>Lua</li>
<li>nodeJS</li>
</ul>
<h4 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h4><ul>
<li>发布订阅</li>
<li>Lua脚本</li>
<li>事务</li>
<li>pipeline</li>
</ul>
<h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><p>源代码可阅读化，可定制化。</p>
<p>不依赖外部库。</p>
<p>单线程模型。</p>
<h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5wd21gt8hnw0.png"></p>
<h4 id="高可用、分布式"><a href="#高可用、分布式" class="headerlink" title="高可用、分布式"></a>高可用、分布式</h4><p>Redis-Sentinel(v2.8)支持高可用</p>
<p>Redis-Cluster(v3.0)支持分布式</p>
<h3 id="Redis典型使用场景"><a href="#Redis典型使用场景" class="headerlink" title="Redis典型使用场景"></a>Redis典型使用场景</h3><ul>
<li>缓存系统</li>
<li>计数器</li>
<li>消息队列系统</li>
<li>排行榜</li>
<li>社交网络</li>
<li>实时系统</li>
</ul>
<h3 id="Redis常用配置"><a href="#Redis常用配置" class="headerlink" title="Redis常用配置"></a>Redis常用配置</h3><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.2jn1w020cq20.png"></p>
<hr>
<h2 id="API-的理解和使用"><a href="#API-的理解和使用" class="headerlink" title="API 的理解和使用"></a>API 的理解和使用</h2><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ul>
<li>keys 计算数据库里所有的健</li>
<li>dbsize 算出数据库的大小</li>
<li>exists key 判断一个 key 是否存在</li>
<li>del key [key …] 删除 key</li>
<li>expire key seconds 为 key 设置过期时间</li>
<li>type key 查看数据类型</li>
</ul>
<h4 id="keys-命令"><a href="#keys-命令" class="headerlink" title="keys 命令"></a>keys 命令</h4><p><strong>API</strong></p>
<pre class="line-numbers language-none"><code class="language-none">keys * # 遍历所有key
keys [pattern] # 遍历合适的key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>keys 命令一般不在生产环境使用，keys命令是一个O(N)的命令</p>
</blockquote>
<p>那怎么用呢？ <strong>热备从节点</strong>（之后会讲）</p>
<h4 id="dpsize-命令"><a href="#dpsize-命令" class="headerlink" title="dpsize 命令"></a>dpsize 命令</h4><pre class="line-numbers language-none"><code class="language-none">dpsize # 计算key的总数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>时间复杂度是O(1)</p>
</blockquote>
<h4 id="exists-命令"><a href="#exists-命令" class="headerlink" title="exists 命令"></a>exists 命令</h4><pre class="line-numbers language-none"><code class="language-none">exists key # 检查key是否存在<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>时间复杂度是O(1)</p>
</blockquote>
<h4 id="del-命令"><a href="#del-命令" class="headerlink" title="del 命令"></a>del 命令</h4><pre class="line-numbers language-none"><code class="language-none">del key # 删除指定的key-value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="expire-ttl-presist-命令"><a href="#expire-ttl-presist-命令" class="headerlink" title="expire ttl presist 命令"></a>expire ttl presist 命令</h4><pre class="line-numbers language-none"><code class="language-none">expire key seconds # key在seconds秒后过期
ttl key # 查看key剩余的过期时间
persist key # 去掉key的过期时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="type-命令"><a href="#type-命令" class="headerlink" title="type 命令"></a>type 命令</h4><pre class="line-numbers language-none"><code class="language-none">type key # 返回key的类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="时间复杂度总览"><a href="#时间复杂度总览" class="headerlink" title="时间复杂度总览"></a>时间复杂度总览</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5r1u84fxd5k0.png"></p>
<hr>
<h3 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h3><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6jrwpihh2z40.png"></p>
<p>Redis 是基于内存的数据库，而内存是相对来说比较昂贵的。</p>
<p>Redis 源码内部是有 redisObject 这样一个结构体。</p>
<p>这个结构体包含了 <strong>数据类型</strong> <strong>编码方式</strong> 数据指针 虚拟内存 等等信息。</p>
<hr>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>我们可以理解为，Redis 执行命令的时候，命令就进入了高速公路，只能一个一个来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.1v6ootmrokf4.png"></p>
<p>也就是说，Redis 在一个瞬间，只会执行一条命令。</p>
<p><strong>单线程为什么这么快？</strong></p>
<ul>
<li>纯内存（最主要原因）</li>
<li>非阻塞 IO（不会在 IO 上浪费特别多的时间）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.hs15j92nbhk.png"></p>
<ul>
<li>避免线程切换和竞态消耗</li>
</ul>
<p><strong>单线程需要注意什么？</strong></p>
<ul>
<li>一次只运行一条命令</li>
<li>拒绝长（慢）命令</li>
<li>其实不是单线程（执行 fysnc / close file descriptor 命令的时候会有额外的线程来做）</li>
</ul>
<hr>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>value 可以存 <strong>字符串</strong> <strong>数字</strong> <strong>二进制</strong> <strong>JSON</strong></p>
<p>value 的大小限制是 512M</p>
<h4 id="主要使用场景"><a href="#主要使用场景" class="headerlink" title="主要使用场景"></a>主要使用场景</h4><ul>
<li>缓存</li>
<li>计数器</li>
<li>分布式锁</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-none"><code class="language-none">get key # 获取 key 对应的 value
set key value # 设置 key-value
del key # 删除key-value

incr key # 自增1
decr key # 自减1
incrby key k # 自增k
decrby key k # 自减k

set key value # 不管 key 是否存在，都设置
setnx key value # key 不存在，才设置
set key value xx # key 存在，才设置

mget key1 key2 key3... # 批量获取 key，原子操作
mset key1 value1 key2 value2 # 批量设置 key-value

getset key newvalue # set key newvalue 并返回旧的 value
append key value # 将 value 追加到旧 value
strlen key # 返回字符串的长度


incrbyfloat key 3.5 # 增加 key 对应的值3.5
getrange key start end # 获取字符串指定下标所有的值
setrange key index value # 设置指定下标所有对应的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上除了 mset 和 mget 命令，时间复杂度都是O(1)</p>
<p><strong>使用 mget 可以省去大量的网络时间</strong></p>
<hr>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="哈希键值结构"><a href="#哈希键值结构" class="headerlink" title="哈希键值结构"></a>哈希键值结构</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.404do7owwjg0.png"></p>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-none"><code class="language-none">hget key field # 获取 hash key 对应的 field 的 value
hset key field value # 设置 hash key 对应 field 的 value
hdel key field # 删除 hash key 对应 field 的 value

hexists key field # 判断 hash key 是否有 field
hlen key # 获取 hash key field 的数量

hmget key field1 field2... # 获取一批 O(N)
hmset key field1 value1 field2 value2 # O(N)

hgetall key # 返回 hash key 对应所有的 field 和 value O(N)
hvals key # 返回所有的 value O(N)
hkeys key # 返回所有的 field O(N)

hsetnx key field value # 设置 hash key 对应 field 的 value (如果 field 存在，则失败)
hincrby key field intCounter # hash key 对应的 field 的 value 自增 intCounter
hibcrbyfloat key field floatCounter # hincrby 浮点数版<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.5sbiyv3sdww0.png"></p>
<h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-none"><code class="language-none">rpush key value1 value2 ...valueN # 从列表右端插入值（1 - N 个）
lpush key value1 value2 ...valueN # 从列表左端插入值（1 - N 个）

linsert key before|after value newValue # 在list指定的值前｜后插入newValue O(N)

lpop key # 从左边弹出一个item
rpop key # 从右边弹出一个item

lrem key count value # 根据 count 值，从列表中删除所有 value 相等的项 O(N)
（1）count &gt; 0，从左到右，删除最多 count 个 value 相等的项
（2）count &lt; 0，从右到左，删除最多 Math.abs(count) 个 value 相等的项
（3）count = 0，删除所有 value 相等的项

ltrim key start end # 按照索引范围修剪列表 O(N)

lrange key start end # 获取列表指定索引范围所有 item O(N)
lindex key index # 获取列表指定索引的 item O(N)
llen key # 获取列表长度

lset key index newValue # 设置列表指定索引值为 newValue O(N)

---
blpop key timeout # lpop 阻塞版本，timeout 是阻塞超时时间，timeout=0 为永远不阻塞
brpop key timeout # 从右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>无序</li>
<li>无重复</li>
<li>支持集合间操作</li>
</ul>
<h4 id="集合内API"><a href="#集合内API" class="headerlink" title="集合内API"></a>集合内API</h4><pre class="line-numbers language-none"><code class="language-none">sadd key element # 向集合 key 添加 element（如果element已经存在，添加失败）
srem key element # 将集合 key 中的 element 移除掉

scard key # 计算集合大小
sismember key value # 判断 value 是否在集合中
srandmember key count # 从集合中随机挑count个元素
spop key # 从集合中随机弹出一个元素
smembers key # 获取集合所有元素

sdiff key1 key2 # 差集
sinter key1 key2 # 交集
sunion key1 key2 # 并集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><h4 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.6a2uqdchz640.png"></p>
<h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-none"><code class="language-none">zadd key score element(可以是多对) # 添加 score 和 element O(logN)
zrem key element(可以是多对) # 删除元素

zscore key element # 返回元素的分数
zincrby key increScore element # 增加或减少元素的分数
zcard key # 返回元素的总个数

zrange key start end [WITHSCORES] # 返回指定索引范围内的升序元素[分值]O(logN+M)
zrangebyscore key minScore maxScore [WITHSCORES] # 按分数O(logN+M)
zcount key minScore maxScore # 返回指定分数范围内的个数
zremrangebyrank key start end # 删除指定排名内的升序元素
zremrangebyscore key minScore maxScore # 按分值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Redis-客户端的使用"><a href="#Redis-客户端的使用" class="headerlink" title="Redis 客户端的使用"></a>Redis 客户端的使用</h2><hr>
<h2 id="瑞士军刀-Redis-其他功能"><a href="#瑞士军刀-Redis-其他功能" class="headerlink" title="瑞士军刀 Redis 其他功能"></a>瑞士军刀 Redis 其他功能</h2><hr>
<h2 id="Redis-持久化的取舍和选择"><a href="#Redis-持久化的取舍和选择" class="headerlink" title="Redis 持久化的取舍和选择"></a>Redis 持久化的取舍和选择</h2><hr>
<h2 id="常见的持久化开发运维问题"><a href="#常见的持久化开发运维问题" class="headerlink" title="常见的持久化开发运维问题"></a>常见的持久化开发运维问题</h2><hr>
<h2 id="Redis-复制的原理与优化"><a href="#Redis-复制的原理与优化" class="headerlink" title="Redis 复制的原理与优化"></a>Redis 复制的原理与优化</h2><hr>
<h2 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h2><hr>
<h2 id="初识-Redis-Cluster"><a href="#初识-Redis-Cluster" class="headerlink" title="初识 Redis Cluster"></a>初识 Redis Cluster</h2><hr>
<h2 id="深入-Redis-Cluster"><a href="#深入-Redis-Cluster" class="headerlink" title="深入 Redis Cluster"></a>深入 Redis Cluster</h2><hr>
<h2 id="缓存设计与优化"><a href="#缓存设计与优化" class="headerlink" title="缓存设计与优化"></a>缓存设计与优化</h2><hr>
<h2 id="Redis-云平台-CacheCloud"><a href="#Redis-云平台-CacheCloud" class="headerlink" title="Redis 云平台 CacheCloud"></a>Redis 云平台 CacheCloud</h2>]]></content>
      <categories>
        <category>Redis学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>《Java 并发实现原理：JDK 源码剖析》读书笔记</title>
    <url>/2021/07/22/java-bing-fa-shi-xian-yuan-li-jdk-yuan-ma-pou-xi-du-shu-bi-ji/</url>
    <content><![CDATA[<h1 id="《Java-并发实现原理：JDK-源码剖析》读书笔记"><a href="#《Java-并发实现原理：JDK-源码剖析》读书笔记" class="headerlink" title="《Java 并发实现原理：JDK 源码剖析》读书笔记"></a>《Java 并发实现原理：JDK 源码剖析》读书笔记</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来这段时间，要看的书太多，正愁看哪本呢。。。。。</p>
<p>好家伙，Guide 哥直接开启读心术，发布读书活动。</p>
<p>我立马下单，响应 Guide 哥的号召，开冲！</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/IMG_20210722_215424.73o8fj1f4k00.jpg"></p>
<p>保证每天看一点，记一点，进步一点。</p>
<hr>
<h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><hr>
<h3 id="一、线程的优雅关闭"><a href="#一、线程的优雅关闭" class="headerlink" title="一、线程的优雅关闭"></a>一、线程的优雅关闭</h3><hr>
<h4 id="1-1-stop-与-destroy-函数"><a href="#1-1-stop-与-destroy-函数" class="headerlink" title="1.1 stop() 与 destroy() 函数"></a>1.1 stop() 与 destroy() 函数</h4><p>不要用 stop() 与 destroy() <strong>强制关闭</strong>线程。</p>
<p>因为<strong>强制关闭</strong>线程，线程中使用的资源，例如文件描述符、网络连接等不能正常的关闭。</p>
<p>合理的办法是让它运行完，干净利落的释放掉全部资源。</p>
<p>如果是一个不断循环的线程，就利用线程的通信机制，让主线程通知其退出。</p>
<blockquote>
<p>拓展阅读</p>
</blockquote>
<p><a href="https://blog.csdn.net/qq_27442469/article/details/96704970">Java高并发 Stop() 和 Interrupt() 的区别</a></p>
<p><a href="https://www.nhooo.com/note/qa0z8d.html">Java Process destory() 方法与示例</a></p>
<hr>
<h4 id="1-2-守护线程"><a href="#1-2-守护线程" class="headerlink" title="1.2 守护线程"></a>1.2 守护线程</h4><p>假设在main()函数中开了一个线程，不断循环打印。main函数退出后，该线程是否会退出呢？整个进程是否会退出呢？</p>
<p>答案是不会，在 C 语言中，main函数退出，代表着程序的终结。</p>
<p>但是在 Java 中并不是这样，Java 有 <strong>守护线程</strong> 与 <strong>非守护线程</strong> 这个概念。</p>
<p>默认开启的都是非守护线程，垃圾回收线程是守护线程，只要当所有非守护线程退出后，垃圾回收线程才会退出。</p>
<hr>
<h4 id="1-3-设置关闭的标识位"><a href="#1-3-设置关闭的标识位" class="headerlink" title="1.3 设置关闭的标识位"></a>1.3 设置关闭的标识位</h4><p>整个死循环，不设标识位。好家伙，真就代码和人有一个能跑就行。</p>
<p>不设标识位万万不可，恐怕部门 leader 看到你那不设关闭标识位的死循环，都得狂冒冷汗。</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/888418ED-679A-4AA4-81ED-333CA434833F.39zunpexbke0.jpeg"></p>
<hr>
<h3 id="二、InterruptedException-函数与-interrupt-函数"><a href="#二、InterruptedException-函数与-interrupt-函数" class="headerlink" title="二、InterruptedException() 函数与 interrupt() 函数"></a>二、InterruptedException() 函数与 interrupt() 函数</h3><hr>
<h4 id="2-1-什么情况下会抛出-Interrupted-异常"><a href="#2-1-什么情况下会抛出-Interrupted-异常" class="headerlink" title="2.1 什么情况下会抛出 Interrupted 异常"></a>2.1 什么情况下会抛出 Interrupted 异常</h4><p>只有那些声明了会抛出 InterruptedException 的函数才会抛出异常，也就是 sleep() wait() join()。</p>
<p>看这个就懂了：<a href="https://www.cnblogs.com/expiator/p/9265774.html">interrupt()方法的简单理解</a></p>
<hr>
<h4 id="2-2-轻量级阻塞与重量级阻塞"><a href="#2-2-轻量级阻塞与重量级阻塞" class="headerlink" title="2.2 轻量级阻塞与重量级阻塞"></a>2.2 轻量级阻塞与重量级阻塞</h4><p>能被中断的阻塞，被称为<strong>轻量级阻塞</strong>，对应的线程状态是 WAITING 或者 TIMED_WAITING 。</p>
<p>而像 synchronized 这种不能被中断的阻塞称为<strong>重量级阻塞</strong>，对应的状态是 BLOCKED。</p>
<p>下图是一个线程完整的状态迁移过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.h69rv8ust3k.png" alt="线程的状态迁移过程"></p>
<p>初始线程处于 NEW 状态，调用 start() 之后开始执行，进入 RUNNING 或者 READY 状态，如果没有调用任何的阻塞函数，线程只会在 RUNNING 和 READY 之间切换，也就是系统时间片调度。</p>
<p>这两种状态的切换是操作系统完成的，开发者基本没有机会介入，除了可以调用 yield() 函数，放弃对 CPU 的占用。</p>
<p>一旦调用了图中的任何阻塞函数，线程就会进入 WAITING 或者 TIMED_WAITING 状态。</p>
<p>WAITING 是<strong>无限期阻塞</strong></p>
<p>TIMED_WAITING 传入了一个时间参数，阻塞一个有限的时间。</p>
<p>如果使用了 synchronized 关键字或者 synchronized 块，则会进入 BLOCKED 状态。</p>
<p>除了常用的 阻塞 / 唤醒 函数，还有一些不太常见的函数。</p>
<p>比如 LockSupport.park() / unpack()，这对函数非常关键，Concurrent 包中 Lock 的实现依赖这一对操作原语。</p>
<p>所以，interrupted()的精确含义是 <strong>唤醒轻量级阻塞</strong> ，而不是 <strong>中断一个线程</strong>。</p>
<hr>
<h4 id="2-3-t-isInterrupted-与-Thread-interrupted-的区别"><a href="#2-3-t-isInterrupted-与-Thread-interrupted-的区别" class="headerlink" title="2.3 t.isInterrupted() 与 Thread.interrupted()的区别"></a>2.3 t.isInterrupted() 与 Thread.interrupted()的区别</h4><p>这两个函数都是线程用来判断自己是否收到过中断信号的，前者是非静态函数，后者是静态函数。</p>
<p>二者的区别在于，前者只是<strong>读取中断状态，不修改状态</strong>；后者不仅<strong>读取中断状态，还会重置中断标志位</strong>。</p>
<hr>
<h3 id="三、synchronized-关键字"><a href="#三、synchronized-关键字" class="headerlink" title="三、synchronized 关键字"></a>三、synchronized 关键字</h3><hr>
<h4 id="3-1-锁的对象是什么"><a href="#3-1-锁的对象是什么" class="headerlink" title="3.1 锁的对象是什么"></a>3.1 锁的对象是什么</h4><p>锁的对象有两个，一个是对象实例，一个是 class 模版。</p>
<p>比如</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>就是对实例加锁。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">synchronized</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就是对 class 模版加锁（因为是静态）</p>
<p>所以，一个静态函数和一个非静态函数都加了 synchronized 关键字，分别被两个线程调用，并不会互斥，因为是两把不同的锁。</p>
<hr>
<h4 id="3-2-锁的本质是什么"><a href="#3-2-锁的本质是什么" class="headerlink" title="3.2 锁的本质是什么"></a>3.2 锁的本质是什么</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.4idbxsjpvua0.png" alt="线程、锁和资源的关系"></p>
<p>锁其实就是一个对象，这个对象要完成以下几件事情：</p>
<ul>
<li>内部有一个标志位（status 变量），记录自己有没有被某个线程占用。最简单的情况是这个 status 有 0、1 两个取值，0 表示没有线程占用这个锁，1 表示某个线程占用了这个锁。</li>
<li>如果这个对象被某个线程占用，它得记录这个线程的 thread ID，知道自己被哪个线程占用了。</li>
<li>这个对象还得维护一个 thread id list，记录其他所有阻塞的、等待拿这个锁的线程。当线程释放锁之后，从这个 thread id list 里面取一个线程唤醒。</li>
</ul>
<hr>
<h4 id="3-3-synchronized-实现原理"><a href="#3-3-synchronized-实现原理" class="headerlink" title="3.3 synchronized 实现原理"></a>3.3 synchronized 实现原理</h4><p>在 Java 的对象头里，有一块数据叫 Mark Word。</p>
<p>在 64 位机器上，Mark Word 是8字节（64位）的，这 64 位中有 2 个重要字段：锁标志位和占用该锁的 thread ID。</p>
<p>不同版本的 JVM 实现，对象头的数据结构会有各种差异。</p>
<hr>
<h3 id="四、wait-与-notify"><a href="#四、wait-与-notify" class="headerlink" title="四、wait() 与 notify()"></a>四、wait() 与 notify()</h3><hr>
<h4 id="4-1-生产者-消费者模型"><a href="#4-1-生产者-消费者模型" class="headerlink" title="4.1 生产者-消费者模型"></a>4.1 生产者-消费者模型</h4><p><img src="https://cdn.jsdelivr.net/gh/panghairui/image-hosting@master/panghairui-blog/image.3aiglvhk93e0.png" alt="生产者-消费者模型"></p>
<p>一个内存队列，多个<strong>生产者</strong>线程往内存队列中放数据。</p>
<p>多个<strong>消费者</strong>线程从内存队列中取数据。</p>
<p>要想实现这样的一个编程模型，我们应该做到</p>
<ul>
<li>内存队列本身要加锁，才能实现线程安全。</li>
<li>阻塞。当内存队列满了，生产者放不进去时，会被阻塞。当内存队列是空的时，消费者无事可做，也会被阻塞。</li>
<li>双向通知。消费者被阻塞之后，生产者放入新数据，要 notify() 消费者。反之，生产者被阻塞后，消费者消费了数据，要 notify() 生产者。</li>
</ul>
<p>但是在代码层面，要<strong>如何阻塞</strong>？<strong>如何双向通知</strong>呢？</p>
<p><strong>如何阻塞</strong></p>
<ul>
<li>线程自己阻塞自己，也就是生产者、消费者线程各自调用 wait() 和 notify()。</li>
<li>用一个阻塞队列，当取不到或者放不进去数据的时候，入队 / 出队 函数本身就是阻塞的。</li>
</ul>
<p><strong>如何双向通知</strong></p>
<ul>
<li>wait() 与 notify() 机制。</li>
<li>Condition 机制。</li>
</ul>
<hr>
<h4 id="4-2-为什么和-synchronized-一起使用"><a href="#4-2-为什么和-synchronized-一起使用" class="headerlink" title="4.2 为什么和 synchronized 一起使用"></a>4.2 为什么和 synchronized 一起使用</h4><p>假设两个线程之间要通信，对于同一个对象来说，一个线程调用该对象的 wait()，另一个线程调用该对象的 notify()，该对象本身就需要同步。</p>
<p>所以，加 synchronized 主要是为了同步。</p>
<hr>
<h4 id="4-3-为什么-wait-的时候必须释放锁"><a href="#4-3-为什么-wait-的时候必须释放锁" class="headerlink" title="4.3 为什么 wait() 的时候必须释放锁"></a>4.3 为什么 wait() 的时候必须释放锁</h4><p>当线程 A 加锁调用 wait() 方法之后，此时 wait() 进入阻塞状态，如果 wait() 不释放锁，岂不是其他线程都唤醒不了该线程了？</p>
<p>所以，在 wait() 内部，会先释放掉锁，然后进入阻塞状态，之后被另一个线程唤醒，去重新拿锁。</p>
<blockquote>
<p>面试官问 sleep() 和 wait() 的区别的时候可以答出这一点，sleep() 是抱着锁睡，wait() 会释放锁</p>
</blockquote>
<hr>
<h4 id="4-4-wait-与-notify-的问题"><a href="#4-4-wait-与-notify-的问题" class="headerlink" title="4.4 wait() 与 notify() 的问题"></a>4.4 wait() 与 notify() 的问题</h4><p>问题就是没法精确唤醒。</p>
<p>因为 wait() 和 notify() 作用的对象和 synchronized 作用的对象是同一个，每个对象没有区分标识。</p>
<p>精确唤醒我们可以用 Condition 来实现。</p>
<hr>
<h3 id="五、volatile-关键字"><a href="#五、volatile-关键字" class="headerlink" title="五、volatile 关键字"></a>五、volatile 关键字</h3><hr>
<h4 id="5-1-64-位写入的原子性"><a href="#5-1-64-位写入的原子性" class="headerlink" title="5.1 64 位写入的原子性"></a>5.1 64 位写入的原子性</h4><p>多线程场景下，线程 A 调用 set(100)，线程 B 调用 get()，在某些场景下，返回值可能不是 100 。</p>
<p>这是因为 JVM 规范没有要求 64 位的 long 或者 double 的写入是原子的。在 32 位的机器上，一个 64 位变量的写入可能被拆分成两个 32 位的写操作来执行。这样一来，读取线程就可能读到 <strong>一半的值</strong> 。</p>
<p>解决办法也很简单，在 long 前面加上 volatile 关键字。</p>
<hr>
<h4 id="5-2-内存可见性"><a href="#5-2-内存可见性" class="headerlink" title="5.2 内存可见性"></a>5.2 内存可见性</h4><p>不仅 64 位，32 位或者位数更小的赋值和取值操作，其实也有问题。</p>
<p>比如一个线程修改变量值为 true 之后，另一个线程去读，读到的事 false，但是之后能读到 true。也就是 <strong>最终一致性</strong>，不是 <strong>强一致性</strong>。</p>
<p>所以，我们说的 <strong>内存可见性</strong>， 指的是 <strong>写完之后立即对其他线程可见</strong>，它的反面不是 <strong>不可见</strong>，而是 <strong>稍后才能看见</strong>。</p>
<p>解决这个问题很容易，给变量加上 volatile 关键字即可。</p>
<hr>
<h4 id="5-3-重排序：DCL-问题"><a href="#5-3-重排序：DCL-问题" class="headerlink" title="5.3 重排序：DCL 问题"></a>5.3 重排序：DCL 问题</h4><p>单例模式的线程安全的写法不止一种，常用写法为 DCL（双重效验锁）。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">case</span> <span class="token class-name">Sington</span> <span class="token punctuation">{</span>
  
  	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Sington</span> instance<span class="token punctuation">;</span>
  	
  	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Sington</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Sington</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                  	instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 有问题</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述的 instance = new Instance() 代码有问题</p>
<p>其底层会分为三个操作</p>
<p>（1）分配一块内存</p>
<p>（2）在内存上初始化成员函数</p>
<p>（3）把 instance 引用指向内存</p>
<p><strong>但是（2）和（3）可能重排序。</strong>因为二者先后没有依赖关系。</p>
<p>这样的话，另一个线程可能拿到一个未完全初始化的对象，直接去访问里面的成员变量，就可能出错。</p>
<p>解决方法也很简单，就是为 instance 变量加上 volatile 修饰。</p>
<hr>
<h3 id="六、JMM-与-happen-before"><a href="#六、JMM-与-happen-before" class="headerlink" title="六、JMM 与 happen-before"></a>六、JMM 与 happen-before</h3><hr>
<h4 id="6-1-为什么会存在-内存可见性-问题"><a href="#6-1-为什么会存在-内存可见性-问题" class="headerlink" title="6.1 为什么会存在 内存可见性 问题"></a>6.1 为什么会存在 <strong>内存可见性</strong> 问题</h4><p>这里从 JMM 的角度来说，就是因为线程内存分为 <strong>线程本地内存</strong> 和 <strong>共享内存</strong>。</p>
<p>我们在本地内存所做的修改无法及时刷新到共享内存，就会存在内存可见性问题。</p>
<hr>
<h4 id="6-2-重排序与内存可见性的关系"><a href="#6-2-重排序与内存可见性的关系" class="headerlink" title="6.2 重排序与内存可见性的关系"></a>6.2 重排序与内存可见性的关系</h4><p>重排序分类：</p>
<ul>
<li>编译器重排序：对于没有先后依赖关系的语句，编译器可以重新调整语句的执行顺序</li>
<li>CPU 指令重排序：在指令级别，让没有依赖关系的多条指令并行</li>
<li>CPU 内存重排序：CPU 有自己的缓存，指令的执行顺序和写入主内存的顺序不完全一致</li>
</ul>
<p>在三种重排序中，第三类就是造成 <strong>内存可见性</strong> 问题的主因。</p>
<p>举个例子：</p>
<p>假设有两个线程，线程 1 执行 X = 1 命令 和 a = Y 命令，线程 2 执行 Y = 1 命令 和 b = X 命令。</p>
<p>最后 a、b 的结果应该是什么？</p>
<p>因为 线程 1 和 线程 2 的执行顺序不确定，所以结果可能是</p>
<ul>
<li>a = 0, b = 1</li>
<li>a = 1, b = 0</li>
<li>a = 1, b = 1</li>
</ul>
<p>正常就这三种可能性，但实际还可能是 a = 0, b = 0，为什么呢？</p>
<p>原因是 线程 1 先执行 X = 1 后执行 a = Y，但此时 X = 1 还在自己的 Store Buffer 里，但在 线程 2 看来，a = Y 和 X = 1 顺序却是颠倒的。指令没有重排序，写入内存的操作被延迟了，也就是内存被重排序了，这就造成内存可见行问题。</p>
<hr>
<h4 id="6-3-as-if-serial-语义"><a href="#6-3-as-if-serial-语义" class="headerlink" title="6.3 as-if-serial 语义"></a>6.3 as-if-serial 语义</h4><p>对于 开发者 而言，都不希望有任何重排序，这样理解和开发最简单。</p>
<p>但是对于 CPU 而言，重排序能提升效率。</p>
<p>于是问题就来了，重排序的原则是什么？</p>
<p><strong>单线程程序的重排序规则</strong>：只要操作之间没有依赖性，编译器和 CPU 就可以任意重排序，因为执行结果不会改变。这也就是 as-if-serial 语义。</p>
<p><strong>多线程程序的重排序规则</strong>：编译器和 CPU 只能保证每个线程的 as-if-serial 语义。线程之间的数据依赖和线程影响，需要编译器和 CPU 的上层来决定。</p>
<hr>
<h4 id="6-4-happen-before-是什么"><a href="#6-4-happen-before-是什么" class="headerlink" title="6.4 happen-before 是什么"></a>6.4 happen-before 是什么</h4><p>如果 A happen-before B，意味着 A 的执行结果必须对 B 可见，也就是保证跨线程的内存可见性。</p>
<p>基于 happen-before 这种描述方法，JMM 对开发者做出了一系列承诺：</p>
<ul>
<li>单线程中的每个操作，happen-before 对应线程中任意后续操作</li>
<li>对 volatile 变量的写入，happen-before 对应后续对这个变量的读取</li>
<li>对 synchronized 的解锁，happen-before 对应后续对这个锁的加锁</li>
</ul>
<p>……</p>
<p>对于非 volatile 变量的写入和读取，不在这个承诺之列。</p>
<hr>
<h4 id="6-5-happen-before-的传递性"><a href="#6-5-happen-before-的传递性" class="headerlink" title="6.5 happen-before 的传递性"></a>6.5 happen-before 的传递性</h4><p>如果 A happen-before B，B happen-before C，那么一定有 A happen-before C</p>
<hr>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>Java并发</tag>
      </tags>
  </entry>
</search>
